{"version":3,"sources":["../../dist/index.es.js","examples/example-basic.jsx","examples/example-function.jsx","examples/example-multiple-watches.jsx","examples/example-style.jsx","examples/example-values.jsx","examples/example-benchmark.jsx","App.js","index.js"],"names":["validators","phone","value","PHONE_REGEX","test","email","EMAIL_REGEX","minLength","len","length","maxLength","required","arguments","undefined","Object","keys","index_es_FormGuard","_ref","children","dirty","isvalid","react_default","a","createElement","className","defineProperty","obj","key","enumerable","configurable","writable","_extends","assign","target","i","source","prototype","hasOwnProperty","call","slicedToArray","arr","Array","isArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","push","err","sliceIterator","TypeError","asArray","val","defaultValues","checkbox","select-multiple","file-multiple","index_es_ValidatedForm","id","name","onSubmit","_ref$formVals","formVals","stateBuffer","_useState","react","_useState2","state","setState","_useState3","_useState4","vals","setFormVals","formRef","managedChildren","injectProps","childNodes","Children","map","el","props","type","injected","hasChildren","isFormElement","includes","isGuard","elState","multiple","select","file","getNormalizedType","substr","determineValue","blurred","onChange","e","_onChange","onBlur","mergeState","_onBlur","onBlue","handleFormElement","validatesWith","watches","apply","_watches$reduce","reduce","_ref2","_ref3","groupDirty","curState","curStateEmpty","markValid","invalidate","validated","_watches$reduce2","acc","isDirty","hasBeenBlurred","handleFormGuard","values","filter","s","setStateValueForAllElements","ref","preventDefault","resetForm","state1","state2","entries","_ref4","_ref5","_e$target","checked","options","files","from","o","selected","setFormVal","current","reset","st","_ref6","_ref7","ExampleBasic","console","log","htmlFor","cb1","cb2","cb3","ExampleFunction","ExampleMultipleWatches","input1","input2","ExampleStyle","ExampleValues","comments","ExampleBenchmark","toConsumableArray","idx","concat","App","Fragment","href","example_basic","example_function","example_multiple_watches","example_style","example_values","example_benchmark","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8af2e0b0.chunk.js","sourcesContent":["import React, { cloneElement, useState, useRef, useEffect } from 'react';\nvar validators = {\n  phone: function phone(value) {\n    return PHONE_REGEX.test(value);\n  },\n  email: function email(value) {\n    return EMAIL_REGEX.test(value);\n  },\n  minLength: function minLength(len) {\n    return function (value) {\n      return value.length >= len;\n    };\n  },\n  maxLength: function maxLength(len) {\n    return function (value) {\n      return value.length <= len;\n    };\n  },\n  required: function required() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return typeof value === 'number' || value !== null && value !== undefined && value.length !== 0 && Object.keys(value).length !== 0 && value !== '';\n  } // eslint-disable-next-line no-control-regex\n\n};\nvar EMAIL_REGEX = /^$|(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\nvar PHONE_REGEX = /^$|^(\\+\\d{1,3})?\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/;\n\nvar FormGuard = function FormGuard(_ref) {\n  var children = _ref.children,\n      dirty = _ref.dirty,\n      isvalid = _ref.isvalid;\n  return !isvalid && dirty === true && React.createElement('span', {\n    className: 'validation-error'\n  }, children);\n};\n\nvar defineProperty = function defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/* eslint-disable brace-style */\n\n\nvar asArray = function asArray(val) {\n  return Array.isArray(val) ? val : [val];\n};\n\nvar defaultValues = {\n  'checkbox': false,\n  'select-multiple': [],\n  'file-multiple': []\n};\n\nvar ValidatedForm = function ValidatedForm(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      id = _ref.id,\n      name = _ref.name,\n      onSubmit = _ref.onSubmit,\n      _ref$formVals = _ref.formVals,\n      formVals = _ref$formVals === undefined ? {} : _ref$formVals; // stateBuffer accumulates state changes while the FormGuard tags are being\n  // processed with injectProps->handleformGuard.\n  // ...allowing us to only call setState once, after all FormGuards have been\n  // processed.\n  // See; https://github.com/michaellasky/react-formguards/issues/5\n\n  var stateBuffer = {}; // state consists of:\n  //  dirty: has the control been changed?\n  //  validated: set by FormGuard to true if the input is being watched\n  //  isvalid: true when all the conditions of all watching FormGuards are met\n  //  blurred: true after the control has been focused and blurred once\n  //    Once an element has been blurred we know it's not the\n  //    initial change or click\n  //    See: https://github.com/michaellasky/react-formguards/issues/7\n\n  var _useState = useState({}),\n      _useState2 = slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(formVals),\n      _useState4 = slicedToArray(_useState3, 2),\n      vals = _useState4[0],\n      setFormVals = _useState4[1];\n\n  var formRef = useRef(null);\n  var managedChildren = injectProps(children);\n  var hasNewState = Object.values(stateBuffer).filter(function (s) {\n    return Object.keys(s).length > 0;\n  }).length > 0;\n\n  if (hasNewState) {\n    setState(mergeState(state, stateBuffer));\n  }\n\n  useEffect(invalidateForm, [vals]);\n  return React.createElement('form', {\n    className: className,\n    id: id,\n    name: name,\n    ref: formRef,\n    onSubmit: _onSubmit\n  }, managedChildren); // This function walks through the children recursively and\n  // replaces form elements with managed versions\n\n  function injectProps() {\n    var childNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return React.Children.map(childNodes, function (el, key) {\n      if (!el || !el.props) {\n        return el;\n      }\n\n      var children = el.props.children,\n          type = el.type;\n      var injected = injectProps(children);\n      var hasChildren = injected.length > 0;\n      var isFormElement = ['input', 'select', 'textarea'].includes(type);\n      var isGuard = type === FormGuard;\n\n      if (isFormElement) {\n        return handleFormElement(el, key);\n      } else if (isGuard) {\n        return handleFormGuard(el, key);\n      } else if (hasChildren) {\n        return cloneElement(el, {}, injected);\n      } else {\n        return el;\n      }\n    });\n\n    function handleFormElement(el, key) {\n      function getNormalizedType(el) {\n        var multiple = el.props.multiple;\n        var select = el.type === 'select',\n            file = el.type === 'file';\n\n        if (select && multiple) {\n          return 'select-multiple';\n        } else if (file && multiple) {\n          return 'file-multiple';\n        } else {\n          return el.props.type || el.type;\n        }\n      }\n\n      function determineValue(el, name, type) {\n        var value = vals[name] || el.props.value || defaultValues[type] || '';\n\n        if (type === 'radio') {\n          return el.props.value;\n        } else if (type.substr(0, 4) === 'file') {\n          return undefined;\n        } else {\n          return value;\n        }\n      }\n\n      var name = el.props.name;\n      var elState = state[name] || {};\n      var type = getNormalizedType(el);\n      var value = determineValue(el, name, type);\n\n      var onChange = function onChange(e) {\n        return _onChange(e, el.props.onChange);\n      };\n\n      var onBlur = function onBlur(e) {\n        return _onBlur(e, el.props.onBlue);\n      };\n\n      var invalid = elState.isvalid === false;\n      var className = invalid && elState.blurred === true ? el.props.className + ' input-invalid' : el.props.className;\n      return ['submit', 'image', 'reset'].includes(type) ? el : cloneElement(el, {\n        key: key,\n        className: className,\n        value: value,\n        onChange: onChange,\n        onBlur: onBlur\n      });\n    }\n\n    function handleFormGuard(el, key) {\n      var validatesWith = el.props.validatesWith;\n      var watches = asArray(el.props.watches);\n      var value = watches.map(function (name) {\n        return vals[name] || '';\n      });\n      var isvalid = !!validatesWith.apply(null, value); // WARNING: Side Effect - This reducer also mutates stateBuffer\n\n      var _watches$reduce = watches.reduce(function (_ref2, name) {\n        var _ref3 = slicedToArray(_ref2, 2),\n            groupDirty = _ref3[0],\n            blurred = _ref3[1];\n\n        stateBuffer[name] = stateBuffer[name] || {};\n        var curState = mergeState(state[name], stateBuffer[name]);\n        var curStateEmpty = Object.keys(curState).length === 0;\n        var markValid = isvalid && curState.isvalid === undefined;\n        var invalidate = !isvalid && curState.isvalid !== false;\n\n        if (curStateEmpty || !curState.validated) {\n          stateBuffer[name].validated = true;\n        }\n\n        if (invalidate || markValid) {\n          stateBuffer[name].isvalid = isvalid;\n        }\n\n        return [groupDirty || curState.dirty === true, blurred || curState.blurred];\n      }, [false, false]),\n          _watches$reduce2 = slicedToArray(_watches$reduce, 2),\n          dirty = _watches$reduce2[0],\n          blurred = _watches$reduce2[1]; // If any in the group are dirty or blurred it makes the whole group dirty\n      // or blurred.  \n      // TODO: Refactor this mess for dirty / blurred\n\n\n      stateBuffer = _extends({}, stateBuffer, watches.reduce(function (acc, name) {\n        return _extends({}, acc, defineProperty({}, name, isDirty(name) === dirty ? stateBuffer[name] : _extends({}, stateBuffer[name], {\n          dirty: dirty\n        })));\n      }, {}), watches.reduce(function (acc, name) {\n        return _extends({}, acc, defineProperty({}, name, hasBeenBlurred(name) === blurred ? stateBuffer[name] : _extends({}, stateBuffer[name], {\n          blurred: blurred\n        })));\n      }, {}));\n      return cloneElement(el, {\n        key: key,\n        value: value,\n        dirty: dirty,\n        isvalid: isvalid\n      });\n    }\n  }\n\n  function mergeState(state1, state2) {\n    if (!state1 || !state2) {\n      return state1 || state2;\n    }\n\n    return _extends({}, state1, Object.entries(state2).reduce(function (acc, _ref4) {\n      var _ref5 = slicedToArray(_ref4, 2),\n          name = _ref5[0],\n          elState = _ref5[1];\n\n      return _extends({}, acc, defineProperty({}, name, _extends({}, state1[name], elState)));\n    }, {}));\n  }\n\n  function _onSubmit(e) {\n    e.preventDefault();\n    formIsValid() ? onSubmit(e, vals, resetForm) : setFormDirty();\n  }\n\n  function _onChange(e) {\n    var onChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value,\n        checked = _e$target.checked,\n        options = _e$target.options,\n        files = _e$target.files,\n        type = _e$target.type;\n\n    if (type === 'checkbox') {\n      value = checked;\n    } else if (type === 'select' || type === 'select-multiple') {\n      value = Array.from(options).filter(function (o) {\n        return o.selected;\n      }).map(function (o) {\n        return o.value;\n      });\n    } else if (type === 'file' || type === 'file-multiple') {\n      value = files;\n    }\n\n    setFormVal(name, value);\n\n    if (!isDirty(name)) {\n      setState(mergeState(state, defineProperty({}, name, {\n        dirty: true\n      })));\n    }\n\n    onChange(e);\n  }\n\n  function _onBlur(e) {\n    var onBlur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var name = e.target.name;\n\n    if (state[name] && !state[name].blurred) {\n      setState(mergeState(state, defineProperty({}, name, {\n        blurred: true\n      })));\n    }\n\n    onBlur(e);\n  }\n\n  function resetForm() {\n    formRef.current.reset();\n    setState({});\n    setFormVals({});\n  }\n\n  function setFormVal(name, val) {\n    setFormVals(_extends({}, vals, defineProperty({}, name, val)));\n  }\n\n  function setStateValueForAllElements(st) {\n    setState(Object.entries(state).reduce(function (acc, _ref6) {\n      var _ref7 = slicedToArray(_ref6, 2),\n          name = _ref7[0],\n          elState = _ref7[1];\n\n      return _extends({}, acc, defineProperty({}, name, _extends({}, elState, st)));\n    }, {}));\n  }\n\n  function setFormDirty() {\n    setStateValueForAllElements({\n      dirty: true,\n      blurred: true\n    });\n  }\n\n  function invalidateForm() {\n    setStateValueForAllElements({\n      isvalid: undefined\n    });\n  }\n\n  function isDirty(name) {\n    return stateBuffer[name] && stateBuffer[name].dirty || state[name] && state[name].dirty;\n  }\n\n  function hasBeenBlurred(name) {\n    return stateBuffer[name] && stateBuffer[name].blurred || state[name] && state[name].blurred;\n  }\n\n  function formIsValid() {\n    return Object.values(state).filter(function (s) {\n      return s.validated && !s.isvalid;\n    }).length === 0;\n  }\n};\n\nexport { ValidatedForm, FormGuard, validators, EMAIL_REGEX, PHONE_REGEX };","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBasic = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <FormGuard watches='radioButtons' validatesWith={validators.required} >\n                Pick One!\n      </FormGuard>\n      <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n      <label htmlFor='example1-radioButtons1'>Radio 1</label>\n      <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n      <label htmlFor='example1-radioButtons2'>Radio 2</label>\n      <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n      <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n      <br />\n      <FormGuard\n        watches={['checkBox1', 'checkBox2', 'checkBox3']}\n        validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n                Pick One!\n      </FormGuard>\n      <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n      <label htmlFor='example1-checkbox1'>Check 1</label>\n      <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n      <label htmlFor='example1-checkbox2'>Check 2</label>\n      <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n      <label htmlFor='example1-checkbox3'>Check 3</label>\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBasic;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleFunction = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={val => val === 'Frank Zappa'} >\n                Value must be \"Frank Zappa\"\n      </FormGuard>\n      <input type='text' name='fzappa' id='example2-fzappa' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleFunction;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleMultipleWatches = () => {\n  function validateTwoInputs (input1, input2) {\n    return (input1 && input1.length > 0) ||\n               (input2 && input2.length > 0);\n  }\n\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />\n\n      <FormGuard\n        watches={['input1', 'input2']}\n        validatesWith={validateTwoInputs} >\n\n                Either input 1 OR input 2 is required.\n      </FormGuard>\n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleMultipleWatches;\n","/* eslint-disable indent */\nimport React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleStyle = () => {\n    return (\n      <ValidatedForm id='example-style' onSubmit={(e, formVals) => console.log(formVals)}>\n\n        <label htmlFor='example1-email'>Email:</label>\n        <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n        </FormGuard>\n        <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n        </FormGuard>\n        <input type='email' name='email' id='example1-email' />\n\n        <input type='submit' value='Check the console for onSubmit' />\n      </ValidatedForm>\n    );\n}\n\nexport default ExampleStyle;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleValues = () => {\n  const formVals = {\n    name: 'Emmett Brown',\n    email: 'doc@example.org',\n    phone: '555 555 5555',\n    comments: 'Great Scott!!'\n  };\n\n  return (\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleValues;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBenchmark = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      {[...Array(200).keys()].map(idx =>\n        <div key={idx}>\n          <label htmlFor={`example2-input-${idx}`}>Label {idx}:</label>\n          <FormGuard watches={`input-${idx}`} validatesWith={validators.required} >\n                Value is Required\n          </FormGuard>\n          <input type='text' name={`input-${idx}`} id={`example6-input-${idx}`} />\n        </div>\n      )}\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBenchmark;\n","import React from 'react'\nimport ExampleBasic from './examples/example-basic';\nimport ExampleFunction from './examples/example-function';\nimport ExampleMultipleWatches from './examples/example-multiple-watches';\nimport ExampleStyle from './examples/example-style';\nimport ExampleValues from './examples/example-values';\nimport ExampleBenchmark from './examples/example-benchmark';\n\nconst App = () => {\n  return (\n    <>\n      <section>\n        <h1 id='top'>react-formguards</h1>\n        <h3>A simple, declarative approach to client side validation.</h3>\n        <span><a href='https://www.npmjs.com/package/react-formguards'>npm</a> | <a href='https://github.com/NuclearHorseStudios/react-formguards'>github</a></span>\n\n        <ul>\n          <li><a href='#basic'>Basic Validation</a></li>\n          <li><a href='#custom'>Custom Validation Functions</a></li>\n          <li><a href='#multiple'>Watching Multiple Elements With One FormGuard</a></li>\n          <li><a href='#style'>Styling / CSS</a></li>\n          <li><a href='#preset'>Passing Preset Values</a></li>\n          <li><a href='#benchmark'>Performance / Large Forms With Many Elements</a></li>\n        </ul>\n\n        <hr />\n\n        <div id='basic' className='example'>\n          <div className='example-code'>\n            <h2>Basic Validation</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-basic.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <ol>\n              <li>\n                Just write your form like normal, replacing your &lt;form&gt; tag with a &lt;ValidatedForm&gt; tag.  Pass it an onSubmit function.\n              </li>\n              <li>\n                Then add &lt;FormGuard&gt; tags anywhere you'd like a validation error to show up. <br /> Each &lt;FormGuard&gt; tag:\n                <ul>\n                  <li>Watches specified input(s) and validates as needed</li>\n                  <li>Becomes a &lt;span&gt; in the DOM when the error shows</li>\n                  <li>onSubmit won't be called until all the FormGuard's are satisfied</li>\n                </ul>\n\n                <p>Some basic validators are included -- required, email, phone, maxLength, and minLength</p>\n              </li>\n            </ol>\n            <pre>{`\n  <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n    <label htmlFor='example1-name'>Name:</label>\n    <input type='text' name='name' id='example1-name' />\n\n    <label htmlFor='example1-email'>Email:</label>\n    <FormGuard watches='email' validatesWith={validators.required} >\n              Email is required\n    </FormGuard>\n    <FormGuard watches='email' validatesWith={validators.email} >\n              Please enter a valid email address\n    </FormGuard>\n    <input type='email' name='email' id='example1-email' />\n\n    <label htmlFor='example1-phone'>Telephone:</label>\n    <FormGuard watches='phone' validatesWith={validators.phone} >\n              Please enter a valid phone number\n    </FormGuard>\n    <input type='tel' name='phone' id='example1-phone' />\n\n    <label htmlFor='example1-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example1-comments' />\n\n    <FormGuard watches='radioButtons' validatesWith={validators.required} >\n              Pick One!\n    </FormGuard>\n    <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n    <label htmlFor='example1-radioButtons1'>Radio 1</label>\n    <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n    <label htmlFor='example1-radioButtons2'>Radio 2</label>\n    <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n    <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n    <br />\n    <FormGuard\n      watches={['checkBox1', 'checkBox2', 'checkBox3']}\n      validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n              Pick One!\n    </FormGuard>\n    <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n    <label htmlFor='example1-checkbox1'>Check 1</label>\n    <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n    <label htmlFor='example1-checkbox2'>Check 2</label>\n    <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n    <label htmlFor='example1-checkbox3'>Check 3</label>\n\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n          `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleBasic />\n          </div>\n        </div>\n        <hr />\n        <div id='custom' className='example'>\n          <div className='example-code'>\n            <h2>Custom Validation Functions</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-function.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>Just pass a function to validatesWith to use your own validation functions.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={ val => val === 'Frank Zappa' } >\n          Value must be \"Frank Zappa\"\n      </FormGuard> \n      <input type='text' name='fzappa' id='example2-fzappa' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleFunction />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='multiple' className='example'>\n          <div className='example-code'>\n            <h2>Guarding Multiple Form Elements with one FormGuard</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-multiple-watches.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>A FormGuard can watch multiple elements by passing an array to the <i>watches</i> prop</p>\n            <p>In this example the <i>validateTwoInputs</i> function requires that either <i>input1</i> OR <i>input2</i> is filled in.</p>\n            <pre>\n              {`\n    function validateTwoInputs (input1, input2) {\n      return (input1 && input1.length > 0) || \n             (input2 && input2.length > 0);\n    }\n\n    [...]\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />  \n\n      <FormGuard \n          watches={['input1', 'input2']} \n          validatesWith={validateTwoInputs} >\n          \n          Either input 1 OR input 2 is required.\n      </FormGuard> \n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />  \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleMultipleWatches />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='style' className='example'>\n          <div className='example-code'>\n            <h2>Styling / CSS</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-style.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>react-formguards will add the css class 'input-invalid' to form controls that are invalid.</p>\n            <p>The span that displays a FormGuard error text will have the css class 'validation-error'</p>\n            <pre>\n              {`\n    \n    .input-invalid {\n      outline: 3px solid #0000ff;\n    }\n\n    span.validation-error {\n      float: right;\n      font-weight: bold;\n      color: #00ff00;\n    }\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example4-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example4-email' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleStyle />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='preset' className='example'>\n          <div className='example-code'>\n            <h2>Passing Preset Values</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-values.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>Just pass an object as the formVals prop to preset values in the form.</p>\n            <pre>\n              {`\n    const formVals = {\n      name: 'Emmett Brown',\n      email: 'doc@example.org',\n      phone: '555 555 5555',\n      comments: 'Great Scott!!'\n    };\n\n    [...]\n\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example1-email' />  \n      \n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n          Please enter a valid phone number  \n      </FormGuard> \n      <input type='tel' name='phone' id='example1-phone' />  \n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n          Maximum length (80 characters) exceeded\n      </FormGuard> \n      <textarea name='comments' id='example1-comments' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleValues />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='benchmark' className='example'>\n          <div className='example-code'>\n            <h2>Large Forms</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-benchmark.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>react-formguards handles large forms as well.  Here is a contrived exmaple with 200, individually validated, input boxes.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n    {[...Array(200).keys()].map(idx =>\n      <div key={idx}>\n        <label htmlFor={\\`example2-input-\\${idx}\\`}>Label {idx}:</label>\n        <FormGuard watches={\\`input-\\${idx}\\`} validatesWith={validators.required} >\n              Value is Required\n        </FormGuard>\n        <input type='text' name={\\`input-\\${idx}\\`} id={\\`example6-input-\\${idx}\\`} />\n      </div>\n    )}\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <details>\n              <summary>Click to see example.  </summary>\n              <div>\n                <ExampleBenchmark />\n              </div>\n            </details>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}