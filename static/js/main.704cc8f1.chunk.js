(this["webpackJsonpreact-formguards-example"]=this["webpackJsonpreact-formguards-example"]||[]).push([[0],{10:function(e,a,t){},11:function(e,a,t){"use strict";t.r(a);var n=t(0),l=t.n(n),r=t(2),m=t.n(r),i=(t(10),{phone:function(e){return c.test(e)},email:function(e){return o.test(e)},minLength:function(e){return function(a){return a.length>=e}},maxLength:function(e){return function(a){return a.length<=e}},required:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return"number"===typeof e||null!==e&&void 0!==e&&0!==e.length&&0!==Object.keys(e).length&&""!==e}}),o=/^$|(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/i,c=/^$|^(\+\d{1,3})?\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$/,u="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e},p=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},d=function(e,a){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,a){var t=[],n=!0,l=!1,r=void 0;try{for(var m,i=e[Symbol.iterator]();!(n=(m=i.next()).done)&&(t.push(m.value),!a||t.length!==a);n=!0);}catch(o){l=!0,r=o}finally{try{!n&&i.return&&i.return()}finally{if(l)throw r}}return t}(e,a);throw new TypeError("Invalid attempt to destructure non-iterable instance")},h=function(e){if(Array.isArray(e)){for(var a=0,t=Array(e.length);a<e.length;a++)t[a]=e[a];return t}return Array.from(e)},x=function(e){var a=e.children,t=e.dirty,n=e.isvalid,r=e.id,m=e.name,i=e.className,o=void 0===i?"":i;return!n&&!0===t&&l.a.createElement("span",p({id:r,name:m},{className:o+" validation-error"}),a)},b={checkbox:!1,"select-multiple":[],"file-multiple":[]},f=function(e){var a=e.children,t=e.className,r=e.id,m=e.name,i=e.onSubmit,o=e.useFieldsets,c=void 0!==o&&o,f=e.formVals,E=void 0===f?{}:f,v={},y=Object(n.useState)({}),F=d(y,2),g=F[0],k=F[1],w=Object(n.useState)(function e(a){return Object.entries(a).reduce((function(a,t){var n=d(t,2),l=n[0],r=n[1],m="object"===("undefined"===typeof r?"undefined":u(r))&&!(r instanceof Array);return p({},a,m?e(r):s({},l,r))}),{})}(E)),S=d(w,2),G=S[0],B=S[1],V=Object(n.useRef)(null),W=function e(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return l.a.Children.map(a,(function(a,l){if(!a||!a.props)return a;var i=a.props,o=i.children,c=i.name,u=a.type,s=["input","select","textarea"].includes(u),p=u===x,d="fieldset"===u&&c?[c].concat(h(t)):t,b=e(o,d),f=b.length>0;return s?r(a,l,t):p?m(a,l):f?Object(n.cloneElement)(a,{},b):a}));function r(e,a,t){var l=e.props.name,r=e.props.className||"",m=g[l]||{},i=function(e){var a=e.props.multiple,t="select"===e.type,n="file"===e.type;return t&&a?"select-multiple":n&&a?"file-multiple":e.props.type||e.type}(e),o=function(e,a,t){var n=G[a]||e.props.value||b[t]||"";return"radio"===t?e.props.value:"file"===t.substr(0,4)?void 0:n}(e,l,i),c=!1===m.isvalid&&m.blurred?r+" input-invalid":r;return t.length>0&&(v[l]||(v[l]={}),g[l]&&g[l].fieldsets||(v[l].fieldsets=t)),["submit","image","reset"].includes(i)?e:Object(n.cloneElement)(e,{key:a,className:c,value:o,onChange:function(a){return N(a,e.props.onChange)},onBlur:function(a){return C(a,e.props.onBlur)}})}function m(e,a){var t=e.props.validatesWith,l=A(e.props.watches),r=l.map((function(e){return G[e]||""})),m=!!t.apply(null,r),i=l.reduce((function(e,a){var t=d(e,2),n=t[0],l=t[1];v[a]=v[a]||{};var r=g[a]||{},i=m&&void 0===r.isvalid,o=!m&&!1!==r.isvalid;return r.validated||(v[a].validated=!0),(o||i)&&(v[a].isvalid=m),[n||r.dirty,l||r.blurred]}),[!1,!1]),o=d(i,2),c=o[0],u=o[1];for(var s in l)c&&!P(s)&&(v[s]=p({},v[s]||{},{dirty:c})),u&&!z(s)&&(v[s]=p({},v[s]||{},{blurred:u}));return Object(n.cloneElement)(e,{key:a,value:r,dirty:c,isvalid:m})}}(a);return Object.values(v).filter((function(e){return Object.keys(e).length>0})).length>0&&k(L(g,v)),Object(n.useEffect)((function(){q({isvalid:void 0})}),[G]),l.a.createElement("form",{className:t,id:r,name:m,ref:V,onSubmit:function(e){e.preventDefault();var a=Object.keys(G).reduce((function(e,a){var t=g[a]&&g[a].fieldsets||[];return c&&t.length>0?L(e,function(e,a,t){return e.reduce((function(e,n){return 0===Object.keys(e).length?s({},n,s({},a,t)):s({},n,e)}),{})}(t,a,G[a])):p({},e,s({},a,G[a]))}),{});0===Object.values(g).filter((function(e){return e.validated&&!e.isvalid})).length?i(e,a,j):q({dirty:!0,blurred:!0})}},W);function N(e){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t=e.target,n=t.name,l=t.value,r=t.checked,m=t.options,i=t.files,o=t.type;"checkbox"===o?l=r:"select"===o||"select-multiple"===o?l=Array.from(m).filter((function(e){return e.selected})).map((function(e){return e.value})):"file"!==o&&"file-multiple"!==o||(l=i),O(n,l),P(n)||R(n,"dirty",!0),a(e)}function C(e){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t=e.target.name;g[t]&&!g[t].blurred&&R(t,"blurred",!0),a(e)}function j(){V.current.reset(),k({}),B({})}function O(e,a){B(p({},G,s({},e,a)))}function q(e){k(Object.entries(g).reduce((function(a,t){var n=d(t,2),l=n[0],r=n[1];return p({},a,s({},l,p({},r,e)))}),{}))}function P(e){return g[e]&&g[e].dirty}function z(e){return g[e]&&g[e].blurred}function R(e,a,t){k(p({},g,s({},e,p({},g[e],s({},a,t)))))}function A(e){return Array.isArray(e)?e:[e]}function I(e){return"object"===("undefined"===typeof e?"undefined":u(e))&&!(e instanceof Array)}function L(e,a){for(var t in a)I(e[t])&&I(a[t])?e[t]=L(e[t],a[t]):e[t]=a[t];return e}},E=function(){return l.a.createElement(f,{onSubmit:function(e,a){return console.log(a)}},l.a.createElement("label",{htmlFor:"example1-name"},"Name:"),l.a.createElement("input",{type:"text",name:"name",id:"example1-name"}),l.a.createElement("label",{htmlFor:"example1-email"},"Email:"),l.a.createElement(x,{watches:"email",validatesWith:i.required},"Email is required"),l.a.createElement(x,{watches:"email",validatesWith:i.email},"Please enter a valid email address"),l.a.createElement("input",{type:"email",name:"email",id:"example1-email"}),l.a.createElement("label",{htmlFor:"example1-phone"},"Telephone:"),l.a.createElement(x,{watches:"phone",validatesWith:i.phone},"Please enter a valid phone number"),l.a.createElement("input",{type:"tel",name:"phone",id:"example1-phone"}),l.a.createElement("label",{htmlFor:"example1-comments"},"Comments:"),l.a.createElement(x,{watches:"comments",validatesWith:i.maxLength(80)},"Maximum length (80 characters) exceeded"),l.a.createElement("textarea",{name:"comments",id:"example1-comments"}),l.a.createElement(x,{watches:"radioButtons",validatesWith:i.required},"Pick One!"),l.a.createElement("input",{type:"radio",name:"radioButtons",value:"Radio 1",id:"example1-radioButtons1"}),l.a.createElement("label",{htmlFor:"example1-radioButtons1"},"Radio 1"),l.a.createElement("br",null),l.a.createElement("input",{type:"radio",name:"radioButtons",value:"Radio 2",id:"example1-radioButtons2"}),l.a.createElement("label",{htmlFor:"example1-radioButtons2"},"Radio 2"),l.a.createElement("br",null),l.a.createElement("input",{type:"radio",name:"radioButtons",value:"Radio 3",id:"example1-radioButtons3"}),l.a.createElement("label",{htmlFor:"example1-radioButtons3"},"Radio 3"),l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement(x,{watches:["checkBox1","checkBox2","checkBox3"],validatesWith:function(e,a,t){return e||a||t}},"Pick One!"),l.a.createElement("input",{type:"checkbox",name:"checkBox1",id:"example1-checkbox1"}),l.a.createElement("label",{htmlFor:"example1-checkbox1"},"Check 1"),l.a.createElement("br",null),l.a.createElement("input",{type:"checkbox",name:"checkBox2",id:"example1-checkbox2"}),l.a.createElement("label",{htmlFor:"example1-checkbox2"},"Check 2"),l.a.createElement("br",null),l.a.createElement("input",{type:"checkbox",name:"checkBox3",id:"example1-checkbox3"}),l.a.createElement("label",{htmlFor:"example1-checkbox3"},"Check 3"),l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("input",{type:"submit",value:"Check the console for onSubmit"}))},v=function(){return l.a.createElement(f,{onSubmit:function(e,a){return console.log(a)}},l.a.createElement("label",{htmlFor:"example2-fzappa"},"Must be Frank Zappa:"),l.a.createElement(x,{watches:"fzappa",validatesWith:function(e){return"Frank Zappa"===e}},'Value must be "Frank Zappa"'),l.a.createElement("input",{type:"text",name:"fzappa",id:"example2-fzappa"}),l.a.createElement("input",{type:"submit",value:"Check the console for onSubmit"}))},y=function(){return l.a.createElement(f,{onSubmit:function(e,a){return console.log(a)}},l.a.createElement("label",{htmlFor:"example3-input1"},"Input 1:"),l.a.createElement("input",{type:"text",name:"input1",id:"example3-input1"}),l.a.createElement(x,{watches:["input1","input2"],validatesWith:function(e,a){return e&&e.length>0||a&&a.length>0}},"Either input 1 OR input 2 is required."),l.a.createElement("label",{htmlFor:"example3-input2"},"Input 2:"),l.a.createElement("input",{type:"text",name:"input2",id:"example3-input2"}),l.a.createElement("input",{type:"submit",value:"Check the console for onSubmit"}))},F=function(){return l.a.createElement(f,{id:"example-style",onSubmit:function(e,a){return console.log(a)}},l.a.createElement("label",{htmlFor:"example1-email"},"Email:"),l.a.createElement(x,{watches:"email",validatesWith:i.required},"Email is required"),l.a.createElement(x,{watches:"email",validatesWith:i.email},"Please enter a valid email address"),l.a.createElement("input",{type:"email",name:"email",id:"example1-email"}),l.a.createElement("input",{type:"submit",value:"Check the console for onSubmit"}))},g=function(){return l.a.createElement(f,{formVals:{name:"Emmett Brown",email:"doc@example.org",phone:"555 555 5555",comments:"Great Scott!!"},onSubmit:function(e,a){return console.log(a)}},l.a.createElement("label",{htmlFor:"example1-name"},"Name:"),l.a.createElement("input",{type:"text",name:"name",id:"example1-name"}),l.a.createElement("label",{htmlFor:"example1-email"},"Email:"),l.a.createElement(x,{watches:"email",validatesWith:i.required},"Email is required"),l.a.createElement(x,{watches:"email",validatesWith:i.email},"Please enter a valid email address"),l.a.createElement("input",{type:"email",name:"email",id:"example1-email"}),l.a.createElement("label",{htmlFor:"example1-phone"},"Telephone:"),l.a.createElement(x,{watches:"phone",validatesWith:i.phone},"Please enter a valid phone number"),l.a.createElement("input",{type:"tel",name:"phone",id:"example1-phone"}),l.a.createElement("label",{htmlFor:"example1-comments"},"Comments:"),l.a.createElement(x,{watches:"comments",validatesWith:i.maxLength(80)},"Maximum length (80 characters) exceeded"),l.a.createElement("textarea",{name:"comments",id:"example1-comments"}),l.a.createElement("input",{type:"submit",value:"Check the console for onSubmit"}))},k=t(3),w=function(){return l.a.createElement(f,{onSubmit:function(e,a){return console.log(a)}},Object(k.a)(Array(200).keys()).map((function(e){return l.a.createElement("div",{key:e},l.a.createElement("label",{htmlFor:"example2-input-".concat(e)},"Label ",e,":"),l.a.createElement(x,{watches:"input-".concat(e),validatesWith:i.required},"Value is Required"),l.a.createElement("input",{type:"text",name:"input-".concat(e),id:"example6-input-".concat(e)}))})),l.a.createElement("input",{type:"submit",value:"Check the console for onSubmit"}))},S=t(4),G=function(){var e=Object(n.useState)(!0),a=Object(S.a)(e,2),t=a[0],r=a[1];return l.a.createElement(l.a.Fragment,null,l.a.createElement("form",null,l.a.createElement("label",{htmlFor:"useFieldsets"},"useFieldsets"),l.a.createElement("input",{type:"checkbox",checked:t,onChange:function(){return r(!t)},name:"useFieldSets",id:"useFieldsets"})),l.a.createElement(f,{onSubmit:function(e,a){return console.log(a)},useFieldsets:t},l.a.createElement("fieldset",{name:"person"},l.a.createElement("legend",null,"Person"),l.a.createElement("label",{htmlFor:"example7-name"},"Name:"),l.a.createElement(x,{watches:"name",validatesWith:i.required},"Name is required"),l.a.createElement("input",{type:"text",name:"name",id:"example7-name"}),l.a.createElement("fieldset",{name:"contact-info"},l.a.createElement("legend",null,"Contact Info"),l.a.createElement("label",{htmlFor:"example7-email"},"Email:"),l.a.createElement(x,{watches:"email",validatesWith:i.required},"Email is required"),l.a.createElement(x,{watches:"email",validatesWith:i.email},"Please enter a valid email address"),l.a.createElement("input",{type:"email",name:"email",id:"example7-email"}),l.a.createElement("label",{htmlFor:"example7-phone"},"Telephone:"),l.a.createElement(x,{watches:"phone",validatesWith:i.phone},"Please enter a valid phone number"),l.a.createElement("input",{type:"tel",name:"phone",id:"example7-phone"}))),l.a.createElement("label",{htmlFor:"example7-comments"},"Comments:"),l.a.createElement(x,{watches:"comments",validatesWith:i.maxLength(80)},"Maximum length (80 characters) exceeded"),l.a.createElement("textarea",{name:"comments",id:"example7-comments"}),l.a.createElement("input",{type:"submit",value:"Check the console for onSubmit"})))},B=function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("section",null,l.a.createElement("h1",{id:"top"},"react-formguards"),l.a.createElement("h3",null,"A simple, declarative approach to client side validation."),l.a.createElement("span",null,l.a.createElement("a",{href:"https://www.npmjs.com/package/react-formguards"},"npm")," | ",l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards"},"github")),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("a",{href:"#basic"},"Basic Validation")),l.a.createElement("li",null,l.a.createElement("a",{href:"#custom"},"Custom Validation Functions")),l.a.createElement("li",null,l.a.createElement("a",{href:"#multiple"},"Watching Multiple Elements With One FormGuard")),l.a.createElement("li",null,l.a.createElement("a",{href:"#style"},"Styling / CSS")),l.a.createElement("li",null,l.a.createElement("a",{href:"#preset"},"Passing Preset Values")),l.a.createElement("li",null,l.a.createElement("a",{href:"#fieldsets"},"Grouping data with useFieldsets")),l.a.createElement("li",null,l.a.createElement("a",{href:"#benchmark"},"Performance / Large Forms With Many Elements"))),l.a.createElement("hr",null),l.a.createElement("div",{id:"basic",className:"example"},l.a.createElement("div",{className:"example-code"},l.a.createElement("h2",null,"Basic Validation"),l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-basic.jsx"},"Source"),"  -  ",l.a.createElement("a",{href:"#top"},"Back to top"),l.a.createElement("ol",null,l.a.createElement("li",null,"Just write your form like normal, replacing your <form> tag with a <ValidatedForm> tag.  Pass it an onSubmit function."),l.a.createElement("li",null,"Then add <FormGuard> tags anywhere you'd like a validation error to show up. ",l.a.createElement("br",null)," Each <FormGuard> tag:",l.a.createElement("ul",null,l.a.createElement("li",null,"Watches specified input(s) and validates as needed"),l.a.createElement("li",null,"Becomes a <span> in the DOM when the error shows"),l.a.createElement("li",null,"onSubmit won't be called until all the FormGuard's are satisfied")),l.a.createElement("p",null,"Some basic validators are included -- required, email, phone, maxLength, and minLength"))),l.a.createElement("pre",null,"\n  <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n    <label htmlFor='example1-name'>Name:</label>\n    <input type='text' name='name' id='example1-name' />\n\n  \n    <label htmlFor='example1-email'>Email:</label>\n    <FormGuard watches='email' validatesWith={validators.required} >\n              Email is required\n    </FormGuard>\n    <FormGuard watches='email' validatesWith={validators.email} >\n              Please enter a valid email address\n    </FormGuard>\n    <input type='email' name='email' id='example1-email' />\n\n  \n    <label htmlFor='example1-phone'>Telephone:</label>\n    <FormGuard watches='phone' validatesWith={validators.phone} >\n              Please enter a valid phone number\n    </FormGuard>\n    <input type='tel' name='phone' id='example1-phone' />\n\n  \n    <label htmlFor='example1-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example1-comments' />\n\n  \n    <FormGuard watches='radioButtons' validatesWith={validators.required} >\n              Pick One!\n    </FormGuard>\n    <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n    <label htmlFor='example1-radioButtons1'>Radio 1</label>\n    <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n    <label htmlFor='example1-radioButtons2'>Radio 2</label>\n    <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n    <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n  \n    <br />\n    <FormGuard\n      watches={['checkBox1', 'checkBox2', 'checkBox3']}\n      validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n              Pick One!\n    </FormGuard>\n    <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n    <label htmlFor='example1-checkbox1'>Check 1</label>\n    <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n    <label htmlFor='example1-checkbox2'>Check 2</label>\n    <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n    <label htmlFor='example1-checkbox3'>Check 3</label>\n\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n          ")),l.a.createElement("div",{className:"example-implementation"},l.a.createElement(E,null))),l.a.createElement("hr",null),l.a.createElement("div",{id:"custom",className:"example"},l.a.createElement("div",{className:"example-code"},l.a.createElement("h2",null,"Custom Validation Functions"),l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-function.jsx"},"Source"),"  -  ",l.a.createElement("a",{href:"#top"},"Back to top"),l.a.createElement("p",null,"Just pass a function to validatesWith to use your own validation functions."),l.a.createElement("pre",null,"\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={ val => val === 'Frank Zappa' } >\n          Value must be \"Frank Zappa\"\n      </FormGuard> \n      <input type='text' name='fzappa' id='example2-fzappa' />  \n    \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            ")),l.a.createElement("div",{className:"example-implementation"},l.a.createElement(v,null))),l.a.createElement("hr",null),l.a.createElement("div",{id:"multiple",className:"example"},l.a.createElement("div",{className:"example-code"},l.a.createElement("h2",null,"Guarding Multiple Form Elements with one FormGuard"),l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-multiple-watches.jsx"},"Source"),"  -  ",l.a.createElement("a",{href:"#top"},"Back to top"),l.a.createElement("p",null,"A FormGuard can watch multiple elements by passing an array to the ",l.a.createElement("i",null,"watches")," prop"),l.a.createElement("p",null,"In this example the ",l.a.createElement("i",null,"validateTwoInputs")," function requires that either ",l.a.createElement("i",null,"input1")," OR ",l.a.createElement("i",null,"input2")," is filled in."),l.a.createElement("pre",null,"\n    function validateTwoInputs (input1, input2) {\n      return (input1 && input1.length > 0) || \n             (input2 && input2.length > 0);\n    }\n\n    [...]\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />  \n\n      <FormGuard \n          watches={['input1', 'input2']} \n          validatesWith={validateTwoInputs} >\n          \n          Either input 1 OR input 2 is required.\n      </FormGuard> \n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />  \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            ")),l.a.createElement("div",{className:"example-implementation"},l.a.createElement(y,null))),l.a.createElement("hr",null),l.a.createElement("div",{id:"style",className:"example"},l.a.createElement("div",{className:"example-code"},l.a.createElement("h2",null,"Styling / CSS"),l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-style.jsx"},"Source"),"  -  ",l.a.createElement("a",{href:"#top"},"Back to top"),l.a.createElement("p",null,"react-formguards will add the css class 'input-invalid' to form controls that are invalid."),l.a.createElement("p",null,"The span that displays a FormGuard error text will have the css class 'validation-error'"),l.a.createElement("pre",null,"\n    \n    .input-invalid {\n      outline: 3px solid #0000ff;\n    }\n\n    span.validation-error {\n      float: right;\n      font-weight: bold;\n      color: #00ff00;\n    }\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example4-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example4-email' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            ")),l.a.createElement("div",{className:"example-implementation"},l.a.createElement(F,null))),l.a.createElement("hr",null),l.a.createElement("div",{id:"preset",className:"example"},l.a.createElement("div",{className:"example-code"},l.a.createElement("h2",null,"Passing Preset Values"),l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-values.jsx"},"Source"),"  -  ",l.a.createElement("a",{href:"#top"},"Back to top"),l.a.createElement("p",null,"Just pass an object as the formVals prop to preset values in the form."),l.a.createElement("pre",null,"\n    const formVals = {\n      name: 'Emmett Brown',\n      email: 'doc@example.org',\n      phone: '555 555 5555',\n      comments: 'Great Scott!!'\n    };\n\n    [...]\n\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      \n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example1-email' />  \n      \n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n          Please enter a valid phone number  \n      </FormGuard> \n      <input type='tel' name='phone' id='example1-phone' />  \n\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n          Maximum length (80 characters) exceeded\n      </FormGuard> \n      <textarea name='comments' id='example1-comments' />  \n      \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            ")),l.a.createElement("div",{className:"example-implementation"},l.a.createElement(g,null))),l.a.createElement("hr",null),l.a.createElement("div",{id:"fieldsets",className:"example"},l.a.createElement("div",{className:"example-code"},l.a.createElement("h2",null,"Grouping data with useFieldsets"),l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-fieldsets.jsx"},"Source"),"  -  ",l.a.createElement("a",{href:"#top"},"Back to top"),l.a.createElement("p",null,"If you pass useFieldsets=true to a ValidatedForm it'll create sub-objects in the formVals passed to onSubmit based upon the fieldset hierarchy in the form. "),l.a.createElement("p",null,"In the example below, the data passed to onSubmit takes the form: "),l.a.createElement("pre",null,"\n            \n            {\n              person: {\n                name\n                contact-info: {\n                  email\n                  phone\n                }\n              }\n              comments\n            }\n            \n            "),l.a.createElement("p",null,"If useFieldsets is false it'll have the form:"),l.a.createElement("pre",null,"\n            \n            {\n              name\n              email\n              phone\n              comments\n            }\n            \n            "),l.a.createElement("pre",null,"\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)} useFieldsets={useFieldsets}>\n    \n    <fieldset name=\"person\">\n      <legend>Person</legend>\n\n\n      <label htmlFor='example7-name'>Name:</label>\n      <FormGuard watches='name' validatesWith={validators.required} >\n          Name is required\n      </FormGuard>\n      <input type='text' name='name' id='example7-name' />\n      \n\n      <fieldset name=\"contact-info\">\n        <legend>Contact Info</legend>\n  \n\n        <label htmlFor='example7-email'>Email:</label>\n        <FormGuard watches='email' validatesWith={validators.required} >\n                  Email is required\n        </FormGuard>\n        <FormGuard watches='email' validatesWith={validators.email} >\n                  Please enter a valid email address\n        </FormGuard>\n        <input type='email' name='email' id='example7-email' />\n\n\n        <label htmlFor='example7-phone'>Telephone:</label>\n        <FormGuard watches='phone' validatesWith={validators.phone} >\n                  Please enter a valid phone number\n        </FormGuard>\n        <input type='tel' name='phone' id='example7-phone' />\n\n      </fieldset>\n    </fieldset>\n    \n\n    <label htmlFor='example7-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example7-comments' />\n\n    \n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n            ")),l.a.createElement("div",{className:"example-implementation"},l.a.createElement(G,null))),l.a.createElement("hr",null),l.a.createElement("div",{id:"benchmark",className:"example"},l.a.createElement("div",{className:"example-code"},l.a.createElement("h2",null,"Large Forms"),l.a.createElement("a",{href:"https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-benchmark.jsx"},"Source"),"  -  ",l.a.createElement("a",{href:"#top"},"Back to top"),l.a.createElement("p",null,"react-formguards handles large forms as well.  Here is a contrived exmaple with 200, individually validated, input boxes."),l.a.createElement("pre",null,"\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n    {[...Array(200).keys()].map(idx =>\n      <div key={idx}>\n        <label htmlFor={`example2-input-${idx}`}>Label {idx}:</label>\n        <FormGuard watches={`input-${idx}`} validatesWith={validators.required} >\n              Value is Required\n        </FormGuard>\n        <input type='text' name={`input-${idx}`} id={`example6-input-${idx}`} />\n      </div>\n    )}\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n            ")),l.a.createElement("div",{className:"example-implementation"},l.a.createElement("details",null,l.a.createElement("summary",null,"Click to see example.  "),l.a.createElement("div",null,l.a.createElement(w,null)))))))};m.a.render(l.a.createElement(B,null),document.getElementById("root"))},5:function(e,a,t){e.exports=t(11)}},[[5,1,2]]]);
//# sourceMappingURL=main.704cc8f1.chunk.js.map