{"version":3,"sources":["../../dist/index.es.js","examples/example-basic.jsx","examples/example-function.jsx","examples/example-multiple-watches.jsx","examples/example-style.jsx","examples/example-values.jsx","App.js","index.js"],"names":["validators","phone","value","arguments","length","undefined","PHONE_REGEX","test","email","EMAIL_REGEX","minLength","len","maxLength","required","Object","keys","asArray","val","Array","isArray","index_es_FormGuard","_ref","children","watches","_ref$state","state","mergeState","validatesWith","isvalid","apply","isDirty","forEach","watch","st","markValid","dirty","react_default","a","createElement","className","defineProperty","obj","key","enumerable","configurable","writable","_extends","assign","target","i","source","prototype","hasOwnProperty","call","slicedToArray","arr","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","push","err","sliceIterator","TypeError","defaultValues","checkbox","select-multiple","file-multiple","index_es_ValidatedForm","id","name","onSubmit","_ref$formVals","formVals","_useState","react","_useState2","setState","_useState3","_useState4","vals","setFormVals","resetForm","setStateValueForAllElements","entries","reduce","acc","_ref2","_ref3","controlState","e","preventDefault","values","filter","s","validated","injectProps","childNodes","Children","map","el","props","type","kids","isFormElement","includes","isGuard","invalid","multiple","select","file","getNormalizedType","cloneElement","substr","determineValue","onChange","_e$target","checked","options","files","from","o","selected","setFormVal","_onChange","handleFormElement","handleFormGuard","ExampleBasic","console","log","htmlFor","cb1","cb2","cb3","ExampleFunction","ExampleMultipleWatches","input1","input2","ExampleStyle","ExampleValues","comments","App","Fragment","href","example_basic","example_function","example_multiple_watches","example_style","example_values","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2dc41d9d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nvar validators = {\n  phone: function phone() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return PHONE_REGEX.test(value);\n  },\n  email: function email() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return EMAIL_REGEX.test(value);\n  },\n  minLength: function minLength(len) {\n    return function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return value.length >= len;\n    };\n  },\n  maxLength: function maxLength(len) {\n    return function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return value.length <= len;\n    };\n  },\n  required: function required() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return typeof value === 'number' || value !== null && value !== undefined && value.length !== 0 && Object.keys(value).length !== 0 && value !== '';\n  } // eslint-disable-next-line no-control-regex\n\n};\nvar EMAIL_REGEX = /^$|(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\nvar PHONE_REGEX = /^$|^(\\+\\d{1,3})?\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/;\n\nvar asArray = function asArray(val) {\n  return Array.isArray(val) ? val : [val];\n};\n\nvar FormGuard = function FormGuard(_ref) {\n  var children = _ref.children,\n      watches = _ref.watches,\n      _ref$state = _ref.state,\n      state = _ref$state === undefined ? {} : _ref$state,\n      mergeState = _ref.mergeState,\n      validatesWith = _ref.validatesWith,\n      value = _ref.value;\n  var isvalid = !!validatesWith.apply(null, value);\n  var isDirty = false;\n  watches = asArray(watches);\n  watches.forEach(function (watch) {\n    var st = state[watch];\n    var markValid = isvalid && st && st.isvalid === undefined;\n    var invalidate = !isvalid && st && st.isvalid !== false;\n\n    if (invalidate || markValid) {\n      mergeState(watch, {\n        isvalid: isvalid\n      });\n    }\n\n    isDirty = isDirty || st && st.dirty;\n  });\n  return !isvalid && isDirty === true && React.createElement('span', {\n    className: 'validation-error'\n  }, children);\n};\n\nvar defineProperty = function defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/* eslint-disable react/prop-types */\n\n\nvar defaultValues = {\n  'checkbox': false,\n  'select-multiple': [],\n  'file-multiple': []\n};\n\nvar ValidatedForm = function ValidatedForm(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      id = _ref.id,\n      name = _ref.name,\n      onSubmit = _ref.onSubmit,\n      _ref$formVals = _ref.formVals,\n      formVals = _ref$formVals === undefined ? {} : _ref$formVals;\n\n  var _useState = useState({}),\n      _useState2 = slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(formVals),\n      _useState4 = slicedToArray(_useState3, 2),\n      vals = _useState4[0],\n      setFormVals = _useState4[1];\n\n  useEffect(function () {\n    invalidateForm();\n  }, [vals]); // This function walks through the children recursively and\n  // replaces form elements with managed versions, and also passes\n  // current form element values to relevant FormGuards for validation\n\n  function injectProps() {\n    var childNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return React.Children.map(childNodes, function (el, key) {\n      var props = el.props,\n          type = el.type;\n      var kids = props && props.children ? injectProps(props.children) : [];\n      var isFormElement = ['input', 'select', 'textarea'].includes(type);\n      var isGuard = type === FormGuard;\n      return isFormElement ? handleFormElement(el, key) : isGuard ? handleFormGuard(el, key) : kids.length > 0 ? React.cloneElement(el, {}, kids) : el;\n    });\n\n    function handleFormElement(el, key) {\n      function getNormalizedType(el) {\n        var multiple = el.props.multiple;\n        var select = el.type === 'select',\n            file = el.type === 'file';\n        return select && multiple ? 'select-multiple' : file && multiple ? 'file-multiple' : el.props.type || el.type;\n      }\n\n      function determineValue(el, name, type) {\n        return type === 'radio' ? el.props.value : type.substr(0, 4) === 'file' ? undefined // We cant programtically set file value\n        : vals[name] || el.props.value || defaultValues[type] || '';\n      }\n\n      var name = el.props.name;\n      var invalid = state[name] && state[name].isvalid === false;\n      var type = getNormalizedType(el);\n      var className = invalid && isDirty(name) ? el.props.className + ' input-invalid' : el.props.className;\n      return ['submit', 'image', 'reset'].includes(type) ? el : React.cloneElement(el, {\n        key: key,\n        className: className,\n        value: determineValue(el, name, type),\n        onChange: function onChange(e) {\n          return _onChange(e, el.props.onChange);\n        }\n      });\n    }\n\n    function handleFormGuard(el, key) {\n      var watches = asArray(el.props.watches);\n      var value = watches.map(function (name) {\n        return vals[name] || '';\n      });\n      watches.forEach(function (name) {\n        if (!state[name] || !state[name].validated) {\n          mergeState(name, {\n            validated: true\n          });\n        }\n      });\n      return React.cloneElement(el, {\n        state: state,\n        key: key,\n        mergeState: mergeState,\n        value: value\n      });\n    }\n  }\n\n  function _onSubmit(e) {\n    e.preventDefault();\n    formIsValid() ? onSubmit(e, vals, resetForm) : setFormDirty();\n  }\n\n  function _onChange(e) {\n    var onChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value,\n        checked = _e$target.checked,\n        options = _e$target.options,\n        files = _e$target.files,\n        type = _e$target.type;\n\n    if (type === 'checkbox') {\n      value = checked;\n    } else if (type === 'select' || type === 'select-multiple') {\n      value = Array.from(options).filter(function (o) {\n        return o.selected;\n      }).map(function (o) {\n        return o.value;\n      });\n    } else if (type === 'file') {\n      value = files;\n    }\n\n    if (!isDirty(name)) {\n      mergeState(name, {\n        dirty: true\n      });\n    }\n\n    setFormVal(name, value);\n    onChange(e);\n  }\n\n  function resetForm() {\n    setState({});\n    setFormVals({});\n  }\n\n  function mergeState(name, st) {\n    setState(_extends({}, state, defineProperty({}, name, _extends({}, state[name], st))));\n  }\n\n  function setFormVal(name, val) {\n    val === undefined ? setFormVals(vals.filter(function (val) {\n      return val.name !== name;\n    })) : setFormVals(_extends({}, vals, defineProperty({}, name, val)));\n  }\n\n  function setStateValueForAllElements(key, val) {\n    setState(Object.entries(state).reduce(function (acc, _ref2) {\n      var _ref3 = slicedToArray(_ref2, 2),\n          name = _ref3[0],\n          controlState = _ref3[1];\n\n      return _extends({}, acc, defineProperty({}, name, _extends({}, controlState, defineProperty({}, key, val))));\n    }, {}));\n  }\n\n  function isDirty(name) {\n    return state[name] && state[name].dirty;\n  }\n\n  function formIsValid() {\n    var states = Object.values(state);\n    var invalidElements = states.filter(function (s) {\n      return s.validated && !s.isvalid;\n    });\n    return invalidElements.length === 0;\n  }\n\n  function setFormDirty() {\n    setStateValueForAllElements('dirty', true);\n  }\n\n  function invalidateForm() {\n    setStateValueForAllElements('isvalid', undefined);\n  }\n\n  return React.createElement('form', _extends({\n    className: className,\n    id: id,\n    name: name\n  }, {\n    onSubmit: _onSubmit\n  }), injectProps(children));\n};\n\nexport { ValidatedForm, FormGuard, validators, EMAIL_REGEX, PHONE_REGEX };","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBasic = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <FormGuard watches='radioButtons' validatesWith={validators.required} >\n                Pick One!\n      </FormGuard>\n      <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n      <label htmlFor='example1-radioButtons1'>Radio 1</label>\n      <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n      <label htmlFor='example1-radioButtons2'>Radio 2</label>\n      <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n      <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n      <br />\n      <FormGuard\n        watches={['checkBox1', 'checkBox2', 'checkBox3']}\n        validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n                Pick One!\n      </FormGuard>\n      <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n      <label htmlFor='example1-checkbox1'>Check 1</label>\n      <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n      <label htmlFor='example1-checkbox2'>Check 2</label>\n      <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n      <label htmlFor='example1-checkbox3'>Check 3</label>\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBasic;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleFunction = () => {\n\n    return (\n        <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n            <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n            <FormGuard watches='fzappa' validatesWith={val => val === 'Frank Zappa'} >\n                Value must be \"Frank Zappa\"\n            </FormGuard> \n            <input type='text' name='fzappa' id='example2-fzappa' />  \n            \n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleFunction;","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleMultipleWatches = () => {\n\n    function validateTwoInputs (input1, input2) {\n        return (input1 && input1.length > 0) || \n               (input2 && input2.length > 0);\n    }\n\n    return (\n        <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n            <label htmlFor='example3-input1'>Input 1:</label>\n            <input type='text' name='input1' id='example3-input1' />  \n\n            <FormGuard \n                watches={['input1', 'input2']} \n                validatesWith={validateTwoInputs} >\n                \n                Either input 1 OR input 2 is required.\n            </FormGuard> \n\n            <label htmlFor='example3-input2'>Input 2:</label>\n            <input type='text' name='input2' id='example3-input2' />  \n\n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleMultipleWatches;","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleStyle = () => {\n\n    return (\n        <ValidatedForm id='example-style' onSubmit={(e, formVals) => console.log(formVals)}>\n\n            <label htmlFor='example1-email'>Email:</label>\n            <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required  \n            </FormGuard> \n            <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address  \n            </FormGuard> \n            <input type='email' name='email' id='example1-email' />  \n            \n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleStyle;","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleValues = () => {\n\n    const formVals = {\n        name: 'Emmett Brown',\n        email: 'doc@example.org',\n        phone: '555 555 5555',\n        comments: 'Great Scott!!'\n    };\n\n    return (\n        <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n            <label htmlFor='example1-name'>Name:</label>\n            <input type='text' name='name' id='example1-name' />\n\n            <label htmlFor='example1-email'>Email:</label>\n            <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required  \n            </FormGuard> \n            <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address  \n            </FormGuard> \n            <input type='email' name='email' id='example1-email' />  \n            \n            <label htmlFor='example1-phone'>Telephone:</label>\n            <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number  \n            </FormGuard> \n            <input type='tel' name='phone' id='example1-phone' />  \n\n            <label htmlFor='example1-comments'>Comments:</label>\n            <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n            </FormGuard> \n            <textarea name='comments' id='example1-comments' />  \n            \n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleValues;","import React from 'react'\nimport ExampleBasic from './examples/example-basic';\nimport ExampleFunction from './examples/example-function';\nimport ExampleMultipleWatches from './examples/example-multiple-watches';\nimport ExampleStyle from './examples/example-style';\nimport ExampleValues from './examples/example-values';\n\nconst App = () => {\n  return (\n    <>\n      <section>\n        <h1>react-formguards</h1>\n        <h3>A simple, declarative approach to client side validation.</h3>\n        <span><a href='https://www.npmjs.com/package/react-formguards'>npm</a> | <a href='https://github.com/NuclearHorseStudios/react-formguards'>github</a></span>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Basic Validation</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-basic.jsx'>Source</a>\n            <ol>\n              <li>\n                Just write your form like normal, replacing your &lt;form&gt; tag with a &lt;ValidatedForm&gt; tag.  Pass it an onSubmit function.\n              </li>\n              <li>\n                Then add &lt;FormGuard&gt; tags anywhere you'd like a validation error to show up. <br /> Each &lt;FormGuard&gt; tag:\n                <ul>\n                  <li>Watches specified input(s) and validates as needed</li>\n                  <li>Becomes a &lt;span&gt; in the DOM when the error shows</li>\n                  <li>onSubmit won't be called until all the FormGuard's are satisfied</li>\n                </ul>\n\n                <p>Some basic validators are included -- required, email, phone, maxLength, and minLength</p>\n              </li>\n            </ol>\n            <pre>{`\n  <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n    <label htmlFor='example1-name'>Name:</label>\n    <input type='text' name='name' id='example1-name' />\n\n    <label htmlFor='example1-email'>Email:</label>\n    <FormGuard watches='email' validatesWith={validators.required} >\n              Email is required\n    </FormGuard>\n    <FormGuard watches='email' validatesWith={validators.email} >\n              Please enter a valid email address\n    </FormGuard>\n    <input type='email' name='email' id='example1-email' />\n\n    <label htmlFor='example1-phone'>Telephone:</label>\n    <FormGuard watches='phone' validatesWith={validators.phone} >\n              Please enter a valid phone number\n    </FormGuard>\n    <input type='tel' name='phone' id='example1-phone' />\n\n    <label htmlFor='example1-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example1-comments' />\n\n    <FormGuard watches='radioButtons' validatesWith={validators.required} >\n              Pick One!\n    </FormGuard>\n    <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n    <label htmlFor='example1-radioButtons1'>Radio 1</label>\n    <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n    <label htmlFor='example1-radioButtons2'>Radio 2</label>\n    <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n    <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n    <br />\n    <FormGuard\n      watches={['checkBox1', 'checkBox2', 'checkBox3']}\n      validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n              Pick One!\n    </FormGuard>\n    <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n    <label htmlFor='example1-checkbox1'>Check 1</label>\n    <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n    <label htmlFor='example1-checkbox2'>Check 2</label>\n    <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n    <label htmlFor='example1-checkbox3'>Check 3</label>\n\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n          `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleBasic />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Custom Validation Functions</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-function.jsx'>Source</a>\n            <p>Just pass a function to validatesWith to use your own validation functions.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={ val => val === 'Frank Zappa' } >\n          Value must be \"Frank Zappa\"\n      </FormGuard> \n      <input type='text' name='fzappa' id='example2-fzappa' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleFunction />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Guarding Multiple Form Elements with one FormGuard</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-multiple-watches.jsx'>Source</a>\n            <p>A FormGuard can watch multiple elements by passing an array to the <i>watches</i> prop</p>\n            <p>In this example the <i>validateTwoInputs</i> function requires that either <i>input1</i> OR <i>input2</i> is filled in.</p>\n            <pre>\n              {`\n    function validateTwoInputs (input1, input2) {\n      return (input1 && input1.length > 0) || \n             (input2 && input2.length > 0);\n    }\n\n    [...]\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />  \n\n      <FormGuard \n          watches={['input1', 'input2']} \n          validatesWith={validateTwoInputs} >\n          \n          Either input 1 OR input 2 is required.\n      </FormGuard> \n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />  \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleMultipleWatches />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Styling / CSS</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-style.jsx'>Source</a>\n            <p>react-formguards will add the css class 'input-invalid' to form controls that are invalid.</p>\n            <p>The span that displays a FormGuard error text will have the css class 'validation-error'</p>\n            <pre>\n              {`\n    \n    .input-invalid {\n      outline: 3px solid #0000ff;\n    }\n\n    span.validation-error {\n      float: right;\n      font-weight: bold;\n      color: #00ff00;\n    }\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example4-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example4-email' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleStyle />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Passing Preset Values</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-values.jsx'>Source</a>\n            <p>Just pass an object as the formVals prop to preset values in the form.</p>\n            <pre>\n              {`\n    const formVals = {\n      name: 'Emmett Brown',\n      email: 'doc@example.org',\n      phone: '555 555 5555',\n      comments: 'Great Scott!!'\n    };\n\n    [...]\n\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example1-email' />  \n      \n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n          Please enter a valid phone number  \n      </FormGuard> \n      <input type='tel' name='phone' id='example1-phone' />  \n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n          Maximum length (80 characters) exceeded\n      </FormGuard> \n      <textarea name='comments' id='example1-comments' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleValues />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}