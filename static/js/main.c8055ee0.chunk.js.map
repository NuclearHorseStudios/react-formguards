{"version":3,"sources":["../../src/validators.js","../../src/formGuard.js","../../src/validatedForm.js","examples/example-basic.jsx","examples/example-function.jsx","examples/example-multiple-watches.jsx","examples/example-style.jsx","examples/example-values.jsx","examples/example-benchmark.jsx","App.js","index.js"],"names":["validators","PHONE_REGEX","EMAIL_REGEX","value","Object","FormGuard","children","dirty","isvalid","id","name","className","asArray","val","Array","defaultValues","ValidatedForm","onSubmit","formVals","stateBuffer","useState","state","setState","vals","setFormVals","formRef","useRef","managedChildren","childNodes","el","type","injected","injectProps","hasChildren","isFormElement","includes","isGuard","handleFormElement","handleFormGuard","cloneElement","elState","multiple","select","file","getNormalizedType","determineValue","invalid","key","onChange","e","_onChange","onBlur","_onBlur","validatesWith","watches","map","reduce","groupDirty","blurred","curState","mergeState","curStateEmpty","markValid","invalidate","isDirty","hasBeenBlurred","s","ref","state1","entries","state2","checked","options","files","from","filter","o","ExampleBasic","console","log","htmlFor","required","email","phone","maxLength","cb1","cb2","cb3","ExampleFunction","ExampleMultipleWatches","input1","input2","length","ExampleStyle","ExampleValues","comments","ExampleBenchmark","keys","idx","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8055ee0.chunk.js","sourcesContent":["export const validators = {\n  phone: function (value) {\n    return PHONE_REGEX.test(value);\n  },\n  email: function (value) {\n    return EMAIL_REGEX.test(value);\n  },\n  minLength: function (len) {\n    return (value) => value.length >= len;\n  },\n  maxLength: function(len) {\n    return (value) => value.length <= len;\n  },\n  required: function(value = '') {\n    return typeof value === 'number' || (\n      value !== null &&\n      value !== undefined &&\n      value.length !== 0 &&\n      Object.keys(value).length !== 0 &&\n      value !== '');\n  }\n}\n\n// eslint-disable-next-line no-control-regex\nexport const EMAIL_REGEX = /^$|(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\nexport const PHONE_REGEX = /^$|^(\\+\\d{1,3})?\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/;\n","import React from 'react';\n\nconst FormGuard = ({ children, dirty, isvalid, id, name, className='' }) =>\n  !isvalid && dirty === true &&\n  <span {...{id, name}} className={`${className} validation-error`}>\n    {children}\n  </span>;\n\nexport default FormGuard;\n","/* eslint-disable brace-style */\n/* eslint-disable no-multi-spaces */\n/* eslint-disable react/prop-types */\nimport React, { cloneElement, useState, useRef, useEffect } from 'react';\nimport FormGuard from './formGuard';\n\nconst asArray = val => Array.isArray(val) ? val : [val];\n\nconst defaultValues = {\n  'checkbox': false,\n  'select-multiple': [],\n  'file-multiple': []\n}\n\nconst ValidatedForm = ({\n  children,\n  className,\n  id,\n  name,\n  onSubmit,\n  formVals = {}\n}) => {\n  // stateBuffer accumulates state changes while the FormGuard tags are being\n  // processed with injectProps->handleformGuard.\n  // ...allowing us to only call setState once, after all FormGuards have been\n  // processed.\n  // See; https://github.com/michaellasky/react-formguards/issues/5\n  let stateBuffer = {};\n\n  // state consists of:\n  //  dirty: has the control been changed?\n  //  validated: set by FormGuard to true if the input is being watched\n  //  isvalid: true when all the conditions of all watching FormGuards are met\n  //  blurred: true after the control has been focused and blurred once\n  //    Once an element has been blurred we know it's not the\n  //    initial change or click\n  //    See: https://github.com/michaellasky/react-formguards/issues/7\n  const [state, setState] = useState({});\n  const [vals, setFormVals] = useState(formVals);\n  const formRef = useRef(null);\n  const managedChildren = injectProps(children);\n\n  const hasNewState = Object\n    .values(stateBuffer)\n    .filter(s => Object.keys(s).length > 0)\n    .length > 0;\n\n  if (hasNewState) { setState(mergeState(state, stateBuffer)); }\n\n  useEffect(invalidateForm, [vals]);\n\n  return (\n    <form {...{ className, id, name, ref: formRef, onSubmit: _onSubmit }} >\n      {managedChildren}\n    </form>\n  );\n\n  // This function walks through the children recursively and\n  // replaces form elements with managed versions\n  function injectProps (childNodes = []) {\n    return React.Children.map(childNodes, (el, key) => {\n      if (!el || !el.props) { return el; }\n\n      const { props: { children }, type } = el;\n      const injected = injectProps(children);\n      const hasChildren = injected.length > 0;\n      const isFormElement = ['input', 'select', 'textarea'].includes(type);\n      const isGuard = type === FormGuard;\n\n      if      (isFormElement) { return handleFormElement(el, key);     }\n      else if (isGuard)       { return handleFormGuard(el, key);       }\n      else if (hasChildren)   { return cloneElement(el, {}, injected); }\n      else                    { return el; }\n    });\n\n    function handleFormElement (el, key) {\n      function getNormalizedType (el) {\n        const multiple = el.props.multiple;\n        const [select, file] = [el.type === 'select', el.type === 'file'];\n\n        if      (select && multiple) { return 'select-multiple';        }\n        else if (file && multiple)   { return 'file-multiple';          }\n        else                         { return el.props.type || el.type; }\n      }\n\n      function determineValue (el, name, type) {\n        const value = vals[name] || el.props.value || defaultValues[type] || '';\n\n        if      (type === 'radio')             { return el.props.value; }\n        else if (type.substr(0, 4) === 'file') { return undefined;      }\n        else                                   { return value;          }\n      }\n\n      const name = el.props.name;\n      const elState = state[name] || {};\n      const type = getNormalizedType(el);\n      const value = determineValue(el, name, type);\n      const onChange = (e) => _onChange(e, el.props.onChange);\n      const onBlur = (e) => _onBlur(e, el.props.onBlur);\n\n      const invalid = elState.isvalid === false;\n      const className = invalid && elState.blurred === true\n        ? `${el.props.className || ''} input-invalid`\n        : el.props.className || '';\n\n      return ['submit', 'image', 'reset'].includes(type)\n        ? el\n        : cloneElement(el, { key, className, value, onChange, onBlur });\n    }\n\n    function handleFormGuard (el, key) {\n      const validatesWith = el.props.validatesWith;\n      const watches = asArray(el.props.watches);\n      const value = watches.map(name => vals[name] || '');\n      const isvalid = !!validatesWith.apply(null, value);\n\n      // WARNING: Side Effect - This reducer also mutates stateBuffer\n      const [dirty, blurred] = watches.reduce(([groupDirty, blurred], name) => {\n        stateBuffer[name] = stateBuffer[name] || {};\n        const curState = mergeState(state[name], stateBuffer[name]);\n        const curStateEmpty = Object.keys(curState).length === 0;\n        const markValid = isvalid && curState.isvalid === undefined;\n        const invalidate = !isvalid && curState.isvalid !== false;\n\n        if (curStateEmpty || !curState.validated) {\n          stateBuffer[name].validated = true;\n        }\n        if (invalidate || markValid) {\n          stateBuffer[name].isvalid = isvalid;\n        }\n\n        return [(groupDirty || curState.dirty), (blurred || curState.blurred)];\n      }, [false, false]);\n\n      // If any in the group are dirty or blurred it makes the whole group dirty\n      // or blurred.\n      // TODO: Refactor this mess for dirty / blurred\n      stateBuffer = {\n        ...stateBuffer,\n        ...watches.reduce(\n          (acc, name) => ({\n            ...acc,\n            [name]: isDirty(name) === dirty\n              ? stateBuffer[name]\n              : { ...stateBuffer[name], dirty } }),\n          {}),\n        ...watches.reduce(\n          (acc, name) => ({\n            ...acc,\n            [name]: hasBeenBlurred(name) === blurred\n              ? stateBuffer[name]\n              : { ...stateBuffer[name], blurred } }),\n          {})\n      };\n\n      return cloneElement(el, { key, value, dirty, isvalid });\n    }\n  }\n\n  function mergeState (state1, state2) {\n    if (!state1 || !state2) { return (state1 || state2); }\n\n    return {\n      ...state1,\n      ...Object.entries(state2).reduce(\n        (acc, [name, elState]) =>\n          ({ ...acc, [name]: { ...state1[name], ...elState } }),\n        {})\n    }\n  }\n\n  function _onSubmit (e) {\n    e.preventDefault();\n    formIsValid() ? onSubmit(e, vals, resetForm) : setFormDirty();\n  }\n\n  function _onChange (e, onChange = () => {}) {\n    let { target: { name, value, checked, options, files, type } } = e;\n\n    if (type === 'checkbox') {\n      value = checked;\n    } else if (type === 'select' || type === 'select-multiple') {\n      value = Array.from(options).filter(o => o.selected).map(o => o.value);\n    } else if (type === 'file' || type === 'file-multiple') {\n      value = files;\n    }\n\n    setFormVal(name, value);\n\n    if (!isDirty(name)) {\n      setState(mergeState(state, { [name]: { dirty: true } }));\n    }\n\n    onChange(e);\n  }\n\n  function _onBlur (e, onBlur = () => {}) {\n    const { target: { name } } = e;\n\n    if (state[name] && !state[name].blurred) {\n      setState(mergeState(state, { [name]: { blurred: true } }));\n    }\n\n    onBlur(e);\n  }\n\n  function resetForm () {\n    formRef.current.reset();\n    setState({});\n    setFormVals({});\n  }\n\n  function setFormVal (name, val) {\n    setFormVals({ ...vals, [name]: val });\n  }\n\n  function setStateValueForAllElements (st) {\n    setState(Object.entries(state).reduce(\n      (acc, [name, elState]) =>\n        ({ ...acc, [name]: { ...elState, ...st } }),\n      {}\n    ));\n  }\n\n  function setFormDirty () {\n    setStateValueForAllElements({dirty: true, blurred: true});\n  }\n\n  function invalidateForm () {\n    setStateValueForAllElements({isvalid: undefined});\n  }\n\n  function isDirty (name) {\n    return (stateBuffer[name] && stateBuffer[name].dirty) ||\n           (state[name] && state[name].dirty);\n  }\n\n  function hasBeenBlurred (name) {\n    return (stateBuffer[name] && stateBuffer[name].blurred) ||\n           (state[name] && state[name].blurred);\n  }\n\n  function formIsValid () {\n    return Object\n      .values(state)\n      .filter(s => s.validated && !s.isvalid)\n      .length === 0;\n  }\n}\n\nexport default ValidatedForm;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBasic = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <FormGuard watches='radioButtons' validatesWith={validators.required} >\n                Pick One!\n      </FormGuard>\n      <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n      <label htmlFor='example1-radioButtons1'>Radio 1</label>\n      <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n      <label htmlFor='example1-radioButtons2'>Radio 2</label>\n      <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n      <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n      <br />\n      <FormGuard\n        watches={['checkBox1', 'checkBox2', 'checkBox3']}\n        validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3 }} >\n                Pick One!\n      </FormGuard>\n      <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n      <label htmlFor='example1-checkbox1'>Check 1</label>\n      <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n      <label htmlFor='example1-checkbox2'>Check 2</label>\n      <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n      <label htmlFor='example1-checkbox3'>Check 3</label>\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBasic;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleFunction = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={val => val === 'Frank Zappa'} >\n                Value must be \"Frank Zappa\"\n      </FormGuard>\n      <input type='text' name='fzappa' id='example2-fzappa' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleFunction;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleMultipleWatches = () => {\n  function validateTwoInputs (input1, input2) {\n    return (input1 && input1.length > 0) ||\n               (input2 && input2.length > 0);\n  }\n\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />\n\n      <FormGuard\n        watches={['input1', 'input2']}\n        validatesWith={validateTwoInputs} >\n\n                Either input 1 OR input 2 is required.\n      </FormGuard>\n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleMultipleWatches;\n","/* eslint-disable indent */\nimport React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleStyle = () => {\n    return (\n      <ValidatedForm id='example-style' onSubmit={(e, formVals) => console.log(formVals)}>\n\n        <label htmlFor='example1-email'>Email:</label>\n        <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n        </FormGuard>\n        <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n        </FormGuard>\n        <input type='email' name='email' id='example1-email' />\n\n        <input type='submit' value='Check the console for onSubmit' />\n      </ValidatedForm>\n    );\n}\n\nexport default ExampleStyle;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleValues = () => {\n  const formVals = {\n    name: 'Emmett Brown',\n    email: 'doc@example.org',\n    phone: '555 555 5555',\n    comments: 'Great Scott!!'\n  };\n\n  return (\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleValues;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBenchmark = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      {[...Array(200).keys()].map(idx =>\n        <div key={idx}>\n          <label htmlFor={`example2-input-${idx}`}>Label {idx}:</label>\n          <FormGuard watches={`input-${idx}`} validatesWith={validators.required} >\n                Value is Required\n          </FormGuard>\n          <input type='text' name={`input-${idx}`} id={`example6-input-${idx}`} />\n        </div>\n      )}\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBenchmark;\n","import React from 'react'\nimport ExampleBasic from './examples/example-basic';\nimport ExampleFunction from './examples/example-function';\nimport ExampleMultipleWatches from './examples/example-multiple-watches';\nimport ExampleStyle from './examples/example-style';\nimport ExampleValues from './examples/example-values';\nimport ExampleBenchmark from './examples/example-benchmark';\n\nconst App = () => {\n  return (\n    <>\n      <section>\n        <h1 id='top'>react-formguards</h1>\n        <h3>A simple, declarative approach to client side validation.</h3>\n        <span><a href='https://www.npmjs.com/package/react-formguards'>npm</a> | <a href='https://github.com/NuclearHorseStudios/react-formguards'>github</a></span>\n\n        <ul>\n          <li><a href='#basic'>Basic Validation</a></li>\n          <li><a href='#custom'>Custom Validation Functions</a></li>\n          <li><a href='#multiple'>Watching Multiple Elements With One FormGuard</a></li>\n          <li><a href='#style'>Styling / CSS</a></li>\n          <li><a href='#preset'>Passing Preset Values</a></li>\n          <li><a href='#benchmark'>Performance / Large Forms With Many Elements</a></li>\n        </ul>\n\n        <hr />\n\n        <div id='basic' className='example'>\n          <div className='example-code'>\n            <h2>Basic Validation</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-basic.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <ol>\n              <li>\n                Just write your form like normal, replacing your &lt;form&gt; tag with a &lt;ValidatedForm&gt; tag.  Pass it an onSubmit function.\n              </li>\n              <li>\n                Then add &lt;FormGuard&gt; tags anywhere you'd like a validation error to show up. <br /> Each &lt;FormGuard&gt; tag:\n                <ul>\n                  <li>Watches specified input(s) and validates as needed</li>\n                  <li>Becomes a &lt;span&gt; in the DOM when the error shows</li>\n                  <li>onSubmit won't be called until all the FormGuard's are satisfied</li>\n                </ul>\n\n                <p>Some basic validators are included -- required, email, phone, maxLength, and minLength</p>\n              </li>\n            </ol>\n            <pre>{`\n  <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n    <label htmlFor='example1-name'>Name:</label>\n    <input type='text' name='name' id='example1-name' />\n\n    <label htmlFor='example1-email'>Email:</label>\n    <FormGuard watches='email' validatesWith={validators.required} >\n              Email is required\n    </FormGuard>\n    <FormGuard watches='email' validatesWith={validators.email} >\n              Please enter a valid email address\n    </FormGuard>\n    <input type='email' name='email' id='example1-email' />\n\n    <label htmlFor='example1-phone'>Telephone:</label>\n    <FormGuard watches='phone' validatesWith={validators.phone} >\n              Please enter a valid phone number\n    </FormGuard>\n    <input type='tel' name='phone' id='example1-phone' />\n\n    <label htmlFor='example1-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example1-comments' />\n\n    <FormGuard watches='radioButtons' validatesWith={validators.required} >\n              Pick One!\n    </FormGuard>\n    <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n    <label htmlFor='example1-radioButtons1'>Radio 1</label>\n    <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n    <label htmlFor='example1-radioButtons2'>Radio 2</label>\n    <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n    <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n    <br />\n    <FormGuard\n      watches={['checkBox1', 'checkBox2', 'checkBox3']}\n      validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n              Pick One!\n    </FormGuard>\n    <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n    <label htmlFor='example1-checkbox1'>Check 1</label>\n    <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n    <label htmlFor='example1-checkbox2'>Check 2</label>\n    <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n    <label htmlFor='example1-checkbox3'>Check 3</label>\n\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n          `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleBasic />\n          </div>\n        </div>\n        <hr />\n        <div id='custom' className='example'>\n          <div className='example-code'>\n            <h2>Custom Validation Functions</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-function.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>Just pass a function to validatesWith to use your own validation functions.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={ val => val === 'Frank Zappa' } >\n          Value must be \"Frank Zappa\"\n      </FormGuard> \n      <input type='text' name='fzappa' id='example2-fzappa' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleFunction />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='multiple' className='example'>\n          <div className='example-code'>\n            <h2>Guarding Multiple Form Elements with one FormGuard</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-multiple-watches.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>A FormGuard can watch multiple elements by passing an array to the <i>watches</i> prop</p>\n            <p>In this example the <i>validateTwoInputs</i> function requires that either <i>input1</i> OR <i>input2</i> is filled in.</p>\n            <pre>\n              {`\n    function validateTwoInputs (input1, input2) {\n      return (input1 && input1.length > 0) || \n             (input2 && input2.length > 0);\n    }\n\n    [...]\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />  \n\n      <FormGuard \n          watches={['input1', 'input2']} \n          validatesWith={validateTwoInputs} >\n          \n          Either input 1 OR input 2 is required.\n      </FormGuard> \n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />  \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleMultipleWatches />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='style' className='example'>\n          <div className='example-code'>\n            <h2>Styling / CSS</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-style.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>react-formguards will add the css class 'input-invalid' to form controls that are invalid.</p>\n            <p>The span that displays a FormGuard error text will have the css class 'validation-error'</p>\n            <pre>\n              {`\n    \n    .input-invalid {\n      outline: 3px solid #0000ff;\n    }\n\n    span.validation-error {\n      float: right;\n      font-weight: bold;\n      color: #00ff00;\n    }\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example4-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example4-email' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleStyle />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='preset' className='example'>\n          <div className='example-code'>\n            <h2>Passing Preset Values</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-values.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>Just pass an object as the formVals prop to preset values in the form.</p>\n            <pre>\n              {`\n    const formVals = {\n      name: 'Emmett Brown',\n      email: 'doc@example.org',\n      phone: '555 555 5555',\n      comments: 'Great Scott!!'\n    };\n\n    [...]\n\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example1-email' />  \n      \n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n          Please enter a valid phone number  \n      </FormGuard> \n      <input type='tel' name='phone' id='example1-phone' />  \n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n          Maximum length (80 characters) exceeded\n      </FormGuard> \n      <textarea name='comments' id='example1-comments' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleValues />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='benchmark' className='example'>\n          <div className='example-code'>\n            <h2>Large Forms</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-benchmark.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>react-formguards handles large forms as well.  Here is a contrived exmaple with 200, individually validated, input boxes.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n    {[...Array(200).keys()].map(idx =>\n      <div key={idx}>\n        <label htmlFor={\\`example2-input-\\${idx}\\`}>Label {idx}:</label>\n        <FormGuard watches={\\`input-\\${idx}\\`} validatesWith={validators.required} >\n              Value is Required\n        </FormGuard>\n        <input type='text' name={\\`input-\\${idx}\\`} id={\\`example6-input-\\${idx}\\`} />\n      </div>\n    )}\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <details>\n              <summary>Click to see example.  </summary>\n              <div>\n                <ExampleBenchmark />\n              </div>\n            </details>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}