{"version":3,"sources":["../../src/validators.js","../../src/formGuard.js","../../node_modules/deepmerge/dist/cjs.js","../../src/validatedForm.js","examples/example-basic.jsx","examples/example-function.jsx","examples/example-multiple-watches.jsx","examples/example-style.jsx","examples/example-values.jsx","examples/example-benchmark.jsx","examples/example-fieldsets.jsx","App.js","index.js"],"names":["validators","PHONE_REGEX","EMAIL_REGEX","value","Object","FormGuard","children","dirty","isvalid","id","name","className","isMergeableObject","isNonNullObject","stringValue","prototype","toString","call","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","options","clone","deepmerge","val","Array","isArray","defaultArrayMerge","target","source","concat","map","element","getKeys","keys","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getEnumerableOwnPropertySymbols","propertyIsOnObject","object","property","_","mergeObject","destination","forEach","key","hasOwnProperty","propertyIsUnsafe","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","Error","reduce","prev","next","asArray","defaultValues","ValidatedForm","onSubmit","useFieldsets","formVals","stateBuffer","useState","state","setState","entries","obj","isObj","flattenObj","vals","setFormVals","formRef","useRef","managedChildren","childNodes","fieldsets","el","type","isFormElement","includes","isGuard","childFs","isFieldset","injected","injectProps","hasChildren","handleFormElement","handleFormGuard","cloneElement","propClassName","elState","multiple","select","file","getNormalizedType","determineValue","invalid","onChange","e","_onChange","onBlur","_onBlur","validatesWith","watches","groupDirty","groupBlurred","curState","markValid","invalidate","blurred","isDirty","hasBeenBlurred","s","ref","values","shape","objWithShape","checked","files","from","o","ExampleBasic","console","log","htmlFor","required","email","phone","maxLength","cb1","cb2","cb3","ExampleFunction","ExampleMultipleWatches","input1","input2","length","ExampleStyle","ExampleValues","comments","ExampleBenchmark","idx","ExampleFieldsets","setUseFieldsets","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.485d1371.chunk.js","sourcesContent":["export const validators = {\n  phone: function (value) {\n    return PHONE_REGEX.test(value);\n  },\n  email: function (value) {\n    return EMAIL_REGEX.test(value);\n  },\n  minLength: function (len) {\n    return (value) => value.length >= len;\n  },\n  maxLength: function(len) {\n    return (value) => value.length <= len;\n  },\n  required: function(value = '') {\n    return typeof value === 'number' || (\n      value !== null &&\n      value !== undefined &&\n      value.length !== 0 &&\n      Object.keys(value).length !== 0 &&\n      value !== '');\n  }\n}\n\n// eslint-disable-next-line no-control-regex\nexport const EMAIL_REGEX = /^$|(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/i;\nexport const PHONE_REGEX = /^$|^(\\+\\d{1,3})?\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/;\n","import React from 'react';\n\nconst FormGuard = ({ children, dirty, isvalid, id, name, className='' }) =>\n  !isvalid && dirty === true &&\n  <span {...{id, name}} className={`${className} validation-error`}>\n    {children}\n  </span>;\n\nexport default FormGuard;\n","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n","/* eslint-disable brace-style */\n/* eslint-disable no-multi-spaces */\n/* eslint-disable react/prop-types */\nimport React, { cloneElement, useState, useRef, useEffect } from 'react';\nimport FormGuard from './formGuard';\nimport deepmerge from 'deepmerge';\n\nconst asArray = val => Array.isArray(val) ? val : [val];\n\nconst defaultValues = {\n  'checkbox': false,\n  'select-multiple': [],\n  'file-multiple': []\n}\n\nconst ValidatedForm = ({\n  children,\n  className,\n  id,\n  name,\n  onSubmit,\n  useFieldsets = false,\n  formVals = {}\n}) => {\n  // stateBuffer accumulates state changes while the child elements tags are \n  // being processed with injectProps\n  // ...allowing us to only call setState once, after all FormGuards have been\n  // processed.\n  // See; https://github.com/michaellasky/react-formguards/issues/5\n  let stateBuffer = {};\n\n  // state consists of:\n  //  dirty: has the control been changed?\n  //  validated: set by FormGuard to true if the input is being watched\n  //  isvalid: true when all the conditions of all watching FormGuards are met\n  //  fieldsets: If the form control is nested within fieldsets this will be \n  //    an array with each element being a fieldset name in the hierarchy\n  //  blurred: true after the control has been focused and blurred once\n  //    Once an element has been blurred we know it's not the\n  //    initial change or click\n\n  const [state, setState] = useState({});\n  const [vals, setFormVals] = useState(flattenObj(formVals));\n  const formRef = useRef(null);\n  const managedChildren = injectProps(children);\n\n  // The statebuffer might be mutated after injectProps above\n  const hasNewState = Object\n    .values(stateBuffer)\n    .filter(s => Object.keys(s).length > 0)\n    .length > 0;\n\n  if (hasNewState) { setState(deepmerge(state, stateBuffer)); }\n\n  useEffect(invalidateForm, [vals]);\n\n  return (\n    <form {...{ className, id, name, ref: formRef, onSubmit: _onSubmit }} >\n      {managedChildren}\n    </form>\n  );\n\n  // injectProps recursively walks through all the child nodes passing any \n  // form elements to handleFormElement() and any FormGuard elements to \n  // handleFormGuard().  \n  function injectProps (childNodes = [], fieldsets = []) {\n\n    return React.Children.map(childNodes, (el, key) => {\n      if (!el || !el.props) { return el; }\n\n      const { props: { children, name }, type } = el;\n      \n      const isFormElement = ['input', 'select', 'textarea'].includes(type);\n      const isGuard = type === FormGuard;\n      const isFieldset = type === 'fieldset' && name;\n      const childFs = isFieldset? [ name, ...fieldsets ]: fieldsets;\n      \n      const injected = injectProps(children, childFs);\n      const hasChildren = injected.length > 0;\n\n      if      (isFormElement) { return handleFormElement(el, key, fieldsets); }\n      else if (isGuard)       { return handleFormGuard(el, key);              }\n      else if (hasChildren)   { return cloneElement(el, {}, injected);        }\n      else                    { return el;                                    }\n    });\n\n    // handleFormElement \n    // - attaches custom onChange and onBlur event handlers to the given form \n    //   element.\n    // - updates the stateBuffer with any fieldsets the control is encapsulated \n    //   within\n    // - applies input-invalid css class to the form element as needed\n    function handleFormElement (el, key, fieldsets) {\n      function getNormalizedType (el) {\n        const multiple = el.props.multiple;\n        const [select, file] = [el.type === 'select', el.type === 'file'];\n\n        if      (select && multiple) { return 'select-multiple';        }\n        else if (file && multiple)   { return 'file-multiple';          }\n        else                         { return el.props.type || el.type; }\n      }\n\n      function determineValue (el, name, type) {\n        const value = vals[name] || el.props.value || defaultValues[type] || '';\n\n        if      (type === 'radio')             { return el.props.value; }\n        else if (type.substr(0, 4) === 'file') { return undefined;      }\n        else                                   { return value;          }\n      }\n\n      const name = el.props.name;\n      const propClassName = el.props.className || '';\n      const elState = state[name] || {};\n      const type = getNormalizedType(el);\n      const value = determineValue(el, name, type);\n\n      const onChange = (e) => _onChange(e, el.props.onChange);\n      const onBlur = (e) => _onBlur(e, el.props.onBlur);\n\n      const invalid = elState.isvalid === false;\n      const className = invalid && elState.blurred\n        ? `${propClassName} input-invalid`\n        : propClassName;\n\n      if (fieldsets.length > 0) {\n        if (!stateBuffer[name]) { stateBuffer[name] = {}; }\n        \n        if (!state[name] || !state[name].fieldsets) {\n          stateBuffer[name].fieldsets = fieldsets;\n        }\n      }\n\n      return ['submit', 'image', 'reset'].includes(type)\n        ? el\n        : cloneElement(el, { key, className, value, onChange, onBlur });\n    }\n\n    // handleFormGuard\n    // - Checks all elements the particular guard should be watching for \n    //   validity and updates respective validated, isvalid, dirty, and blurred \n    //   states in the mutable stateBuffer object.\n    function handleFormGuard (el, key) {\n      const validatesWith = el.props.validatesWith;\n      const watches = asArray(el.props.watches);\n      const value = watches.map(name => vals[name] || '');\n      const isvalid = !!validatesWith.apply(null, value);\n\n      // If any elements in the watches array is dirty or blurred we need to set \n      // the whole group of elements being watched to dirty and/or blurred.\n      const [dirty, blurred] = watches.reduce(\n        ([groupDirty, groupBlurred], name) => {\n          stateBuffer[name] = stateBuffer[name] || {};\n          const curState = state[name] || {};\n          const markValid = isvalid && curState.isvalid === undefined;\n          const invalidate = !isvalid && curState.isvalid !== false;\n\n          if (!curState.validated) {\n            stateBuffer[name].validated = true;\n          }\n          if (invalidate || markValid) {\n            stateBuffer[name].isvalid = isvalid;\n          }\n\n          return [\n            (groupDirty || curState.dirty), \n            (groupBlurred || curState.blurred)\n          ];\n      }, [false, false]);\n\n      // Sets dirty and blurred values for any state that doesn't already have\n      // the current value set.\n      for (const name in watches) {\n        if (dirty && !isDirty(name)) {\n          stateBuffer[name] = { ...(stateBuffer[name] || {}), dirty };\n        }\n        if (blurred && !hasBeenBlurred(name)) {\n          stateBuffer[name] = { ...(stateBuffer[name] || {}), blurred };\n        }\n      }\n\n      return cloneElement(el, { key, value, dirty, isvalid });\n    }\n  }\n\n  function _onSubmit (e) {\n\n    e.preventDefault();\n    \n    // Given the input: ['some', 'text'], 'foo', 'bar' will return \n    // { some: { text: { foo: 'bar' }}}\n    function objWithShape (shape, name, value) {\n      return shape.reduce((acc, fs) => \n        Object.keys(acc).length === 0\n          ? ({ [fs]: { [name]: value } })\n          : ({ [fs]: acc })\n      , {});\n    }\n\n    // We need to process vals to merge in deep fieldsets\n    const values = Object.keys(vals).reduce((acc, name) => {\n      const fieldsets = state[name]? state[name].fieldsets || []: [];\n      if (useFieldsets && fieldsets.length > 0) {\n        return deepmerge(acc, objWithShape(fieldsets, name, vals[name]));\n      }\n\n      return ({ ...acc, [name]: vals[name] });\n    } ,{});\n\n    formIsValid() ? onSubmit(e, values, resetForm) : setFormDirty();\n  }\n\n  function _onChange (e, onChange = () => {}) {\n    let { target: { name, value, checked, options, files, type } } = e;\n\n    if (type === 'checkbox') {\n      value = checked;\n    } \n    else if (type === 'select' || type === 'select-multiple') {\n      value = Array.from(options).filter(o => o.selected).map(o => o.value);\n    } \n    else if (type === 'file' || type === 'file-multiple') {\n      value = files;\n    }\n\n    setFormVal(name, value);\n\n    if (!isDirty(name)) {\n      setState(deepmerge(state, { [name]: { dirty: true } }));\n    }\n\n    onChange(e);\n  }\n\n  function _onBlur (e, onBlur = () => {}) {\n    const { target: { name } } = e;\n\n    if (state[name] && !state[name].blurred) {\n      setState(deepmerge(state, { [name]: { blurred: true } }));\n    }\n\n    onBlur(e);\n  }\n\n  function resetForm () {\n    formRef.current.reset();\n    setState({});\n    setFormVals({});\n  }\n\n  function setFormVal (name, value) {\n    setFormVals({...vals, [name]: value });\n  }\n\n  function setStateValueForAllElements (st) {\n    setState(Object.entries(state).reduce(\n      (acc, [name, elState]) => \n        ({ ...acc, [name]: { ...elState, ...st } }),\n      {}\n    ));\n  }\n\n  function setFormDirty () {\n    setStateValueForAllElements({dirty: true, blurred: true});\n  }\n\n  function invalidateForm () {\n    setStateValueForAllElements({isvalid: undefined});\n  }\n\n  function isDirty (name) {\n    return state[name] && state[name].dirty;\n  }\n\n  function hasBeenBlurred (name) {\n    return state[name] && state[name].blurred;\n  }\n\n  function formIsValid () {\n    return Object\n      .values(state)\n      .filter(s => s.validated && !s.isvalid)\n      .length === 0;\n  }\n\n  function flattenObj (obj) {\n    return Object.entries(obj).reduce((acc, [key, val]) => {\n      const isObj = typeof val === 'object' && !(val instanceof Array);\n      return { ...acc, ...(isObj? flattenObj(val): { [key]: val }) }\n    }, {});\n  }\n}\n\nexport default ValidatedForm;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBasic = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <FormGuard watches='radioButtons' validatesWith={validators.required} >\n                Pick One!\n      </FormGuard>\n      <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n      <label htmlFor='example1-radioButtons1'>Radio 1</label>\n      <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n      <label htmlFor='example1-radioButtons2'>Radio 2</label>\n      <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n      <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n      <br />\n      <FormGuard\n        watches={['checkBox1', 'checkBox2', 'checkBox3']}\n        validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3 }} >\n                Pick One!\n      </FormGuard>\n      <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n      <label htmlFor='example1-checkbox1'>Check 1</label>\n      <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n      <label htmlFor='example1-checkbox2'>Check 2</label>\n      <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n      <label htmlFor='example1-checkbox3'>Check 3</label>\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBasic;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleFunction = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={val => val === 'Frank Zappa'} >\n                Value must be \"Frank Zappa\"\n      </FormGuard>\n      <input type='text' name='fzappa' id='example2-fzappa' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleFunction;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleMultipleWatches = () => {\n  function validateTwoInputs (input1, input2) {\n    return (input1 && input1.length > 0) ||\n               (input2 && input2.length > 0);\n  }\n\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />\n\n      <FormGuard\n        watches={['input1', 'input2']}\n        validatesWith={validateTwoInputs} >\n\n                Either input 1 OR input 2 is required.\n      </FormGuard>\n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleMultipleWatches;\n","/* eslint-disable indent */\nimport React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleStyle = () => {\n    return (\n      <ValidatedForm id='example-style' onSubmit={(e, formVals) => console.log(formVals)}>\n\n        <label htmlFor='example1-email'>Email:</label>\n        <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n        </FormGuard>\n        <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n        </FormGuard>\n        <input type='email' name='email' id='example1-email' />\n\n        <input type='submit' value='Check the console for onSubmit' />\n      </ValidatedForm>\n    );\n}\n\nexport default ExampleStyle;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleValues = () => {\n  const formVals = {\n    name: 'Emmett Brown',\n    email: 'doc@example.org',\n    phone: '555 555 5555',\n    comments: 'Great Scott!!'\n  };\n\n  return (\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleValues;\n","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBenchmark = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      {[...Array(200).keys()].map(idx =>\n        <div key={idx}>\n          <label htmlFor={`example2-input-${idx}`}>Label {idx}:</label>\n          <FormGuard watches={`input-${idx}`} validatesWith={validators.required} >\n                Value is Required\n          </FormGuard>\n          <input type='text' name={`input-${idx}`} id={`example6-input-${idx}`} />\n        </div>\n      )}\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBenchmark;\n","import React, { useState } from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleFieldsets = () => {\n  const [useFieldsets, setUseFieldsets] = useState(true);\n  \n  return (\n    <>\n    <form>\n      <label htmlFor=\"useFieldsets\">useFieldsets</label>\n      <input type=\"checkbox\" checked={useFieldsets} onChange={() => setUseFieldsets(!useFieldsets)} name=\"useFieldSets\" id=\"useFieldsets\" />\n    </form>\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)} useFieldsets={useFieldsets}>\n      <fieldset name=\"person\">\n        <legend>Person</legend>\n  \n        <label htmlFor='example7-name'>Name:</label>\n        <FormGuard watches='name' validatesWith={validators.required} >\n            Name is required\n        </FormGuard>\n        <input type='text' name='name' id='example7-name' />\n        <fieldset name=\"contact-info\">\n          <legend>Contact Info</legend>\n    \n          <label htmlFor='example7-email'>Email:</label>\n          <FormGuard watches='email' validatesWith={validators.required} >\n                    Email is required\n          </FormGuard>\n          <FormGuard watches='email' validatesWith={validators.email} >\n                    Please enter a valid email address\n          </FormGuard>\n          <input type='email' name='email' id='example7-email' />\n\n          <label htmlFor='example7-phone'>Telephone:</label>\n          <FormGuard watches='phone' validatesWith={validators.phone} >\n                    Please enter a valid phone number\n          </FormGuard>\n          <input type='tel' name='phone' id='example7-phone' />\n\n        </fieldset>\n      </fieldset>\n      \n      <label htmlFor='example7-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example7-comments' />\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n    </>\n  );\n}\n\nexport default ExampleFieldsets;\n","import React from 'react'\nimport ExampleBasic from './examples/example-basic';\nimport ExampleFunction from './examples/example-function';\nimport ExampleMultipleWatches from './examples/example-multiple-watches';\nimport ExampleStyle from './examples/example-style';\nimport ExampleValues from './examples/example-values';\nimport ExampleBenchmark from './examples/example-benchmark';\nimport ExampleFieldsets from './examples/example-fieldsets';\n\nconst App = () => {\n  return (\n    <>\n      <section>\n        <h1 id='top'>react-formguards</h1>\n        <h3>A simple, declarative approach to client side validation.</h3>\n        <span><a href='https://www.npmjs.com/package/react-formguards'>npm</a> | <a href='https://github.com/NuclearHorseStudios/react-formguards'>github</a></span>\n\n        <ul>\n          <li><a href='#basic'>Basic Validation</a></li>\n          <li><a href='#custom'>Custom Validation Functions</a></li>\n          <li><a href='#multiple'>Watching Multiple Elements With One FormGuard</a></li>\n          <li><a href='#style'>Styling / CSS</a></li>\n          <li><a href='#preset'>Passing Preset Values</a></li>\n          <li><a href='#fieldsets'>Grouping data with useFieldsets</a></li>\n          <li><a href='#benchmark'>Performance / Large Forms With Many Elements</a></li>\n        </ul>\n\n        <hr />\n\n        <div id='basic' className='example'>\n          <div className='example-code'>\n            <h2>Basic Validation</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-basic.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <ol>\n              <li>\n                Just write your form like normal, replacing your &lt;form&gt; tag with a &lt;ValidatedForm&gt; tag.  Pass it an onSubmit function.\n              </li>\n              <li>\n                Then add &lt;FormGuard&gt; tags anywhere you'd like a validation error to show up. <br /> Each &lt;FormGuard&gt; tag:\n                <ul>\n                  <li>Watches specified input(s) and validates as needed</li>\n                  <li>Becomes a &lt;span&gt; in the DOM when the error shows</li>\n                  <li>onSubmit won't be called until all the FormGuard's are satisfied</li>\n                </ul>\n\n                <p>Some basic validators are included -- required, email, phone, maxLength, and minLength</p>\n              </li>\n            </ol>\n            <pre>{`\n  <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n    <label htmlFor='example1-name'>Name:</label>\n    <input type='text' name='name' id='example1-name' />\n\n  \n    <label htmlFor='example1-email'>Email:</label>\n    <FormGuard watches='email' validatesWith={validators.required} >\n              Email is required\n    </FormGuard>\n    <FormGuard watches='email' validatesWith={validators.email} >\n              Please enter a valid email address\n    </FormGuard>\n    <input type='email' name='email' id='example1-email' />\n\n  \n    <label htmlFor='example1-phone'>Telephone:</label>\n    <FormGuard watches='phone' validatesWith={validators.phone} >\n              Please enter a valid phone number\n    </FormGuard>\n    <input type='tel' name='phone' id='example1-phone' />\n\n  \n    <label htmlFor='example1-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example1-comments' />\n\n  \n    <FormGuard watches='radioButtons' validatesWith={validators.required} >\n              Pick One!\n    </FormGuard>\n    <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n    <label htmlFor='example1-radioButtons1'>Radio 1</label>\n    <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n    <label htmlFor='example1-radioButtons2'>Radio 2</label>\n    <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n    <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n  \n    <br />\n    <FormGuard\n      watches={['checkBox1', 'checkBox2', 'checkBox3']}\n      validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n              Pick One!\n    </FormGuard>\n    <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n    <label htmlFor='example1-checkbox1'>Check 1</label>\n    <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n    <label htmlFor='example1-checkbox2'>Check 2</label>\n    <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n    <label htmlFor='example1-checkbox3'>Check 3</label>\n\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n          `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleBasic />\n          </div>\n        </div>\n        <hr />\n        <div id='custom' className='example'>\n          <div className='example-code'>\n            <h2>Custom Validation Functions</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-function.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>Just pass a function to validatesWith to use your own validation functions.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={ val => val === 'Frank Zappa' } >\n          Value must be \"Frank Zappa\"\n      </FormGuard> \n      <input type='text' name='fzappa' id='example2-fzappa' />  \n    \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleFunction />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='multiple' className='example'>\n          <div className='example-code'>\n            <h2>Guarding Multiple Form Elements with one FormGuard</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-multiple-watches.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>A FormGuard can watch multiple elements by passing an array to the <i>watches</i> prop</p>\n            <p>In this example the <i>validateTwoInputs</i> function requires that either <i>input1</i> OR <i>input2</i> is filled in.</p>\n            <pre>\n              {`\n    function validateTwoInputs (input1, input2) {\n      return (input1 && input1.length > 0) || \n             (input2 && input2.length > 0);\n    }\n\n    [...]\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />  \n\n      <FormGuard \n          watches={['input1', 'input2']} \n          validatesWith={validateTwoInputs} >\n          \n          Either input 1 OR input 2 is required.\n      </FormGuard> \n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />  \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleMultipleWatches />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='style' className='example'>\n          <div className='example-code'>\n            <h2>Styling / CSS</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-style.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>react-formguards will add the css class 'input-invalid' to form controls that are invalid.</p>\n            <p>The span that displays a FormGuard error text will have the css class 'validation-error'</p>\n            <pre>\n              {`\n    \n    .input-invalid {\n      outline: 3px solid #0000ff;\n    }\n\n    span.validation-error {\n      float: right;\n      font-weight: bold;\n      color: #00ff00;\n    }\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example4-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example4-email' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleStyle />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='preset' className='example'>\n          <div className='example-code'>\n            <h2>Passing Preset Values</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-values.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>Just pass an object as the formVals prop to preset values in the form.</p>\n            <pre>\n              {`\n    const formVals = {\n      name: 'Emmett Brown',\n      email: 'doc@example.org',\n      phone: '555 555 5555',\n      comments: 'Great Scott!!'\n    };\n\n    [...]\n\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      \n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example1-email' />  \n      \n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n          Please enter a valid phone number  \n      </FormGuard> \n      <input type='tel' name='phone' id='example1-phone' />  \n\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n          Maximum length (80 characters) exceeded\n      </FormGuard> \n      <textarea name='comments' id='example1-comments' />  \n      \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleValues />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='fieldsets' className='example'>\n          <div className='example-code'>\n            <h2>Grouping data with useFieldsets</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-fieldsets.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>If you pass useFieldsets=true to a ValidatedForm it'll create sub-objects in the formVals passed to onSubmit based upon the fieldset hierarchy in the form. </p>\n            <p>In the example below, the data passed to onSubmit takes the form: </p>\n            <pre>{`\n            \n            {\n              person: {\n                name\n                contact-info: {\n                  email\n                  phone\n                }\n              }\n              comments\n            }\n            \n            `}</pre>\n\n            <p>If useFieldsets is false it'll have the form:</p>\n            <pre>{`\n            \n            {\n              name\n              email\n              phone\n              comments\n            }\n            \n            `}</pre>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)} useFieldsets={useFieldsets}>\n    \n    <fieldset name=\"person\">\n      <legend>Person</legend>\n\n\n      <label htmlFor='example7-name'>Name:</label>\n      <FormGuard watches='name' validatesWith={validators.required} >\n          Name is required\n      </FormGuard>\n      <input type='text' name='name' id='example7-name' />\n      \n\n      <fieldset name=\"contact-info\">\n        <legend>Contact Info</legend>\n  \n\n        <label htmlFor='example7-email'>Email:</label>\n        <FormGuard watches='email' validatesWith={validators.required} >\n                  Email is required\n        </FormGuard>\n        <FormGuard watches='email' validatesWith={validators.email} >\n                  Please enter a valid email address\n        </FormGuard>\n        <input type='email' name='email' id='example7-email' />\n\n\n        <label htmlFor='example7-phone'>Telephone:</label>\n        <FormGuard watches='phone' validatesWith={validators.phone} >\n                  Please enter a valid phone number\n        </FormGuard>\n        <input type='tel' name='phone' id='example7-phone' />\n\n      </fieldset>\n    </fieldset>\n    \n\n    <label htmlFor='example7-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example7-comments' />\n\n    \n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleFieldsets />\n          </div>\n        </div>\n\n        <hr />\n\n        <div id='benchmark' className='example'>\n          <div className='example-code'>\n            <h2>Large Forms</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-benchmark.jsx'>Source</a>  -  <a href='#top'>Back to top</a>\n            <p>react-formguards handles large forms as well.  Here is a contrived exmaple with 200, individually validated, input boxes.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n    {[...Array(200).keys()].map(idx =>\n      <div key={idx}>\n        <label htmlFor={\\`example2-input-\\${idx}\\`}>Label {idx}:</label>\n        <FormGuard watches={\\`input-\\${idx}\\`} validatesWith={validators.required} >\n              Value is Required\n        </FormGuard>\n        <input type='text' name={\\`input-\\${idx}\\`} id={\\`example6-input-\\${idx}\\`} />\n      </div>\n    )}\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <details>\n              <summary>Click to see example.  </summary>\n              <div>\n                <ExampleBenchmark />\n              </div>\n            </details>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}