{"version":3,"sources":["../../dist/index.es.js","examples/example-basic.jsx","examples/example-function.jsx","examples/example-multiple-watches.jsx","examples/example-style.jsx","examples/example-values.jsx","App.js","index.js"],"names":["validators","phone","value","arguments","length","undefined","PHONE_REGEX","test","email","EMAIL_REGEX","minLength","len","maxLength","required","Object","keys","asArray","val","Array","isArray","defineProperty","obj","key","enumerable","configurable","writable","_extends","assign","target","i","source","prototype","hasOwnProperty","call","slicedToArray","arr","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","push","err","sliceIterator","TypeError","index_es_FormGuard","_ref","children","watches","_ref$state","state","mergeState","validatesWith","isvalid","apply","elState","reduce","name","_babelHelpers$extends","curState","newState","groupDirty","dirty","markValid","invalidate","validated","updating","entries","forEach","react_default","a","createElement","className","defaultValues","checkbox","select-multiple","file-multiple","index_es_ValidatedForm","id","onSubmit","_ref$formVals","formVals","_useState","react","_useState2","setState","_useState3","_useState4","vals","setFormVals","setStateValueForAllElements","e","preventDefault","values","filter","s","resetForm","injectProps","childNodes","Children","map","el","props","type","injected","isFormElement","includes","isGuard","invalid","multiple","select","file","getNormalizedType","isDirty","substr","determineValue","onChange","_e$target","checked","options","files","from","o","selected","setFormVal","_onChange","handleFormElement","handleFormGuard","st","acc","_ref2","_ref3","controlState","ExampleBasic","console","log","htmlFor","cb1","cb2","cb3","ExampleFunction","ExampleMultipleWatches","input1","input2","ExampleStyle","ExampleValues","comments","App","Fragment","href","example_basic","example_function","example_multiple_watches","example_style","example_values","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0b2b7b23.chunk.js","sourcesContent":["import React, { cloneElement, useState, useEffect } from 'react';\nvar validators = {\n  phone: function phone() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return PHONE_REGEX.test(value);\n  },\n  email: function email() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return EMAIL_REGEX.test(value);\n  },\n  minLength: function minLength(len) {\n    return function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return value.length >= len;\n    };\n  },\n  maxLength: function maxLength(len) {\n    return function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return value.length <= len;\n    };\n  },\n  required: function required() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return typeof value === 'number' || value !== null && value !== undefined && value.length !== 0 && Object.keys(value).length !== 0 && value !== '';\n  } // eslint-disable-next-line no-control-regex\n\n};\nvar EMAIL_REGEX = /^$|(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\nvar PHONE_REGEX = /^$|^(\\+\\d{1,3})?\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/;\n\nvar asArray = function asArray(val) {\n  return Array.isArray(val) ? val : [val];\n};\n\nvar defineProperty = function defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/* eslint-disable no-multi-spaces */\n\n\nvar FormGuard = function FormGuard(_ref) {\n  var children = _ref.children,\n      watches = _ref.watches,\n      _ref$state = _ref.state,\n      state = _ref$state === undefined ? {} : _ref$state,\n      mergeState = _ref.mergeState,\n      validatesWith = _ref.validatesWith,\n      value = _ref.value;\n  var isvalid = !!validatesWith.apply(null, value);\n  var elState = asArray(watches).reduce(function (elState, name) {\n    var _babelHelpers$extends;\n\n    var curState = state[name] || {};\n    var newState = {};\n    var groupDirty = elState.groupDirty || curState.dirty;\n    var markValid = isvalid && curState.isvalid === undefined;\n    var invalidate = !isvalid && curState.isvalid !== false;\n\n    if (!curState.validated) {\n      newState.validated = true;\n    }\n\n    if (invalidate || markValid) {\n      newState.isvalid = isvalid;\n    }\n\n    if (curState.updating) {\n      newState.updating = false;\n    }\n\n    if (Object.entries(newState).length !== 0) {\n      mergeState(name, newState);\n    }\n\n    return _extends({}, elState, (_babelHelpers$extends = {}, defineProperty(_babelHelpers$extends, name, newState), defineProperty(_babelHelpers$extends, 'groupDirty', groupDirty), _babelHelpers$extends));\n  }, {}); // If one of the watches elements is dirty we want to mark them all dirty\n\n  if (elState.groupDirty) {\n    asArray(watches).forEach(function (name) {\n      if (state[name] && !state[name].dirty) {\n        mergeState(name, {\n          dirty: true\n        });\n      }\n    });\n  }\n\n  return !isvalid && elState.groupDirty === true && React.createElement('span', {\n    className: 'validation-error'\n  }, children);\n};\n/* eslint-disable brace-style */\n\n\nvar defaultValues = {\n  'checkbox': false,\n  'select-multiple': [],\n  'file-multiple': []\n};\n\nvar ValidatedForm = function ValidatedForm(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      id = _ref.id,\n      name = _ref.name,\n      onSubmit = _ref.onSubmit,\n      _ref$formVals = _ref.formVals,\n      formVals = _ref$formVals === undefined ? {} : _ref$formVals; // State consists of:\n  // dirty: has the control been changed?\n  // validated: Set by formguard to true if the input is being watched\n  // isvalid: true when all the conditions of all watching formguards are met\n  // updating: is true when the input changes, becomes false once a formguard\n  //  handles the control.  Stops the 'input-invalid' class from being\n\n  var _useState = useState({}),\n      _useState2 = slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(formVals),\n      _useState4 = slicedToArray(_useState3, 2),\n      vals = _useState4[0],\n      setFormVals = _useState4[1];\n\n  useEffect(invalidateForm, [vals]);\n  return React.createElement('form', _extends({\n    className: className,\n    id: id,\n    name: name\n  }, {\n    onSubmit: _onSubmit\n  }), injectProps(children)); // This function walks through the children recursively and\n  // replaces form elements with managed versions, and also passes\n  // current form element values to relevant FormGuards for validation\n\n  function injectProps() {\n    var childNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return React.Children.map(childNodes, function (el, key) {\n      if (!el || !el.props) {\n        return el;\n      }\n\n      var children = el.props.children,\n          type = el.type;\n      var injected = injectProps(children);\n      var isFormElement = ['input', 'select', 'textarea'].includes(type);\n      var isGuard = type === FormGuard;\n\n      if (isFormElement) {\n        return handleFormElement(el, key);\n      } else if (isGuard) {\n        return handleFormGuard(el, key);\n      } else if (injected.length > 0) {\n        return cloneElement(el, {}, injected);\n      } else {\n        return el;\n      }\n    });\n\n    function handleFormElement(el, key) {\n      function getNormalizedType(el) {\n        var multiple = el.props.multiple;\n        var select = el.type === 'select',\n            file = el.type === 'file';\n\n        if (select && multiple) {\n          return 'select-multiple';\n        } else if (file && multiple) {\n          return 'file-multiple';\n        } else {\n          return el.props.type || el.type;\n        }\n      }\n\n      function determineValue(el, name, type) {\n        var value = vals[name] || el.props.value || defaultValues[type] || '';\n\n        if (type === 'radio') {\n          return el.props.value;\n        } else if (type.substr(0, 4) === 'file') {\n          return undefined;\n        } else {\n          return value;\n        }\n      }\n\n      var name = el.props.name;\n      var invalid = state[name] && state[name].isvalid === false;\n      var type = getNormalizedType(el);\n      var className = invalid && isDirty(name) && !state[name].updating ? el.props.className + ' input-invalid' : el.props.className;\n      return ['submit', 'image', 'reset'].includes(type) ? el : cloneElement(el, {\n        key: key,\n        className: className,\n        value: determineValue(el, name, type),\n        onChange: function onChange(e) {\n          return _onChange(e, el.props.onChange);\n        }\n      });\n    }\n\n    function handleFormGuard(el, key) {\n      var watches = asArray(el.props.watches);\n      var value = watches.map(function (name) {\n        return vals[name] || '';\n      });\n      return cloneElement(el, {\n        state: state,\n        key: key,\n        mergeState: mergeState,\n        value: value\n      });\n    }\n  }\n\n  function _onSubmit(e) {\n    e.preventDefault();\n    formIsValid() ? onSubmit(e, vals, resetForm) : setFormDirty();\n  }\n\n  function _onChange(e) {\n    var onChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value,\n        checked = _e$target.checked,\n        options = _e$target.options,\n        files = _e$target.files,\n        type = _e$target.type;\n\n    if (type === 'checkbox') {\n      value = checked;\n    } else if (type === 'select' || type === 'select-multiple') {\n      value = Array.from(options).filter(function (o) {\n        return o.selected;\n      }).map(function (o) {\n        return o.value;\n      });\n    } else if (type === 'file' || type === 'file-multiple') {\n      value = files;\n    }\n\n    if (!isDirty(name)) {\n      mergeState(name, {\n        dirty: true,\n        updating: true\n      });\n    }\n\n    setFormVal(name, value);\n    onChange(e);\n  }\n\n  function resetForm() {\n    setState({});\n    setFormVals({});\n  }\n\n  function mergeState(name, st) {\n    setState(_extends({}, state, defineProperty({}, name, _extends({}, state[name], st))));\n  }\n\n  function setFormVal(name, val) {\n    val === undefined ? setFormVals(vals.filter(function (val) {\n      return val.name !== name;\n    })) : setFormVals(_extends({}, vals, defineProperty({}, name, val)));\n  }\n\n  function setStateValueForAllElements(key, val) {\n    setState(Object.entries(state).reduce(function (acc, _ref2) {\n      var _ref3 = slicedToArray(_ref2, 2),\n          name = _ref3[0],\n          controlState = _ref3[1];\n\n      return _extends({}, acc, defineProperty({}, name, _extends({}, controlState, defineProperty({}, key, val))));\n    }, {}));\n  }\n\n  function setFormDirty() {\n    setStateValueForAllElements('dirty', true);\n  }\n\n  function invalidateForm() {\n    setStateValueForAllElements('isvalid', undefined);\n  }\n\n  function isDirty(name) {\n    return state[name] && state[name].dirty;\n  }\n\n  function formIsValid() {\n    var states = Object.values(state);\n    var invalidElements = states.filter(function (s) {\n      return s.validated && !s.isvalid;\n    });\n    return invalidElements.length === 0;\n  }\n};\n\nexport { ValidatedForm, FormGuard, validators, EMAIL_REGEX, PHONE_REGEX };","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleBasic = () => {\n  return (\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required\n      </FormGuard>\n      <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address\n      </FormGuard>\n      <input type='email' name='email' id='example1-email' />\n\n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number\n      </FormGuard>\n      <input type='tel' name='phone' id='example1-phone' />\n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n      </FormGuard>\n      <textarea name='comments' id='example1-comments' />\n\n      <FormGuard watches='radioButtons' validatesWith={validators.required} >\n                Pick One!\n      </FormGuard>\n      <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n      <label htmlFor='example1-radioButtons1'>Radio 1</label>\n      <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n      <label htmlFor='example1-radioButtons2'>Radio 2</label>\n      <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n      <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n      <br />\n      <FormGuard\n        watches={['checkBox1', 'checkBox2', 'checkBox3']}\n        validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n                Pick One!\n      </FormGuard>\n      <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n      <label htmlFor='example1-checkbox1'>Check 1</label>\n      <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n      <label htmlFor='example1-checkbox2'>Check 2</label>\n      <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n      <label htmlFor='example1-checkbox3'>Check 3</label>\n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n  );\n}\n\nexport default ExampleBasic;\n","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleFunction = () => {\n\n    return (\n        <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n            <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n            <FormGuard watches='fzappa' validatesWith={val => val === 'Frank Zappa'} >\n                Value must be \"Frank Zappa\"\n            </FormGuard> \n            <input type='text' name='fzappa' id='example2-fzappa' />  \n            \n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleFunction;","import React from 'react';\nimport { ValidatedForm, FormGuard } from 'react-formguards'\n\nconst ExampleMultipleWatches = () => {\n\n    function validateTwoInputs (input1, input2) {\n        return (input1 && input1.length > 0) || \n               (input2 && input2.length > 0);\n    }\n\n    return (\n        <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n            <label htmlFor='example3-input1'>Input 1:</label>\n            <input type='text' name='input1' id='example3-input1' />  \n\n            <FormGuard \n                watches={['input1', 'input2']} \n                validatesWith={validateTwoInputs} >\n                \n                Either input 1 OR input 2 is required.\n            </FormGuard> \n\n            <label htmlFor='example3-input2'>Input 2:</label>\n            <input type='text' name='input2' id='example3-input2' />  \n\n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleMultipleWatches;","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleStyle = () => {\n\n    return (\n        <ValidatedForm id='example-style' onSubmit={(e, formVals) => console.log(formVals)}>\n\n            <label htmlFor='example1-email'>Email:</label>\n            <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required  \n            </FormGuard> \n            <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address  \n            </FormGuard> \n            <input type='email' name='email' id='example1-email' />  \n            \n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleStyle;","import React from 'react';\nimport { ValidatedForm, FormGuard, validators } from 'react-formguards'\n\nconst ExampleValues = () => {\n\n    const formVals = {\n        name: 'Emmett Brown',\n        email: 'doc@example.org',\n        phone: '555 555 5555',\n        comments: 'Great Scott!!'\n    };\n\n    return (\n        <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n            <label htmlFor='example1-name'>Name:</label>\n            <input type='text' name='name' id='example1-name' />\n\n            <label htmlFor='example1-email'>Email:</label>\n            <FormGuard watches='email' validatesWith={validators.required} >\n                Email is required  \n            </FormGuard> \n            <FormGuard watches='email' validatesWith={validators.email} >\n                Please enter a valid email address  \n            </FormGuard> \n            <input type='email' name='email' id='example1-email' />  \n            \n            <label htmlFor='example1-phone'>Telephone:</label>\n            <FormGuard watches='phone' validatesWith={validators.phone} >\n                Please enter a valid phone number  \n            </FormGuard> \n            <input type='tel' name='phone' id='example1-phone' />  \n\n            <label htmlFor='example1-comments'>Comments:</label>\n            <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n                Maximum length (80 characters) exceeded\n            </FormGuard> \n            <textarea name='comments' id='example1-comments' />  \n            \n            <input type='submit' value='Check the console for onSubmit' />\n        </ValidatedForm>\n    );\n}\n\nexport default ExampleValues;","import React from 'react'\nimport ExampleBasic from './examples/example-basic';\nimport ExampleFunction from './examples/example-function';\nimport ExampleMultipleWatches from './examples/example-multiple-watches';\nimport ExampleStyle from './examples/example-style';\nimport ExampleValues from './examples/example-values';\n\nconst App = () => {\n  return (\n    <>\n      <section>\n        <h1>react-formguards</h1>\n        <h3>A simple, declarative approach to client side validation.</h3>\n        <span><a href='https://www.npmjs.com/package/react-formguards'>npm</a> | <a href='https://github.com/NuclearHorseStudios/react-formguards'>github</a></span>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Basic Validation</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-basic.jsx'>Source</a>\n            <ol>\n              <li>\n                Just write your form like normal, replacing your &lt;form&gt; tag with a &lt;ValidatedForm&gt; tag.  Pass it an onSubmit function.\n              </li>\n              <li>\n                Then add &lt;FormGuard&gt; tags anywhere you'd like a validation error to show up. <br /> Each &lt;FormGuard&gt; tag:\n                <ul>\n                  <li>Watches specified input(s) and validates as needed</li>\n                  <li>Becomes a &lt;span&gt; in the DOM when the error shows</li>\n                  <li>onSubmit won't be called until all the FormGuard's are satisfied</li>\n                </ul>\n\n                <p>Some basic validators are included -- required, email, phone, maxLength, and minLength</p>\n              </li>\n            </ol>\n            <pre>{`\n  <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n    <label htmlFor='example1-name'>Name:</label>\n    <input type='text' name='name' id='example1-name' />\n\n    <label htmlFor='example1-email'>Email:</label>\n    <FormGuard watches='email' validatesWith={validators.required} >\n              Email is required\n    </FormGuard>\n    <FormGuard watches='email' validatesWith={validators.email} >\n              Please enter a valid email address\n    </FormGuard>\n    <input type='email' name='email' id='example1-email' />\n\n    <label htmlFor='example1-phone'>Telephone:</label>\n    <FormGuard watches='phone' validatesWith={validators.phone} >\n              Please enter a valid phone number\n    </FormGuard>\n    <input type='tel' name='phone' id='example1-phone' />\n\n    <label htmlFor='example1-comments'>Comments:</label>\n    <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n              Maximum length (80 characters) exceeded\n    </FormGuard>\n    <textarea name='comments' id='example1-comments' />\n\n    <FormGuard watches='radioButtons' validatesWith={validators.required} >\n              Pick One!\n    </FormGuard>\n    <input type='radio' name='radioButtons' value='Radio 1' id='example1-radioButtons1' />\n    <label htmlFor='example1-radioButtons1'>Radio 1</label>\n    <input type='radio' name='radioButtons' value='Radio 2' id='example1-radioButtons2' />\n    <label htmlFor='example1-radioButtons2'>Radio 2</label>\n    <input type='radio' name='radioButtons' value='Radio 3' id='example1-radioButtons3' />\n    <label htmlFor='example1-radioButtons3'>Radio 3</label>\n\n    <br />\n    <FormGuard\n      watches={['checkBox1', 'checkBox2', 'checkBox3']}\n      validatesWith={(cb1, cb2, cb3) => { return cb1 || cb2 || cb3}} >\n              Pick One!\n    </FormGuard>\n    <input type='checkbox' name='checkBox1' id='example1-checkbox1' />\n    <label htmlFor='example1-checkbox1'>Check 1</label>\n    <input type='checkbox' name='checkBox2' id='example1-checkbox2' />\n    <label htmlFor='example1-checkbox2'>Check 2</label>\n    <input type='checkbox' name='checkBox3' id='example1-checkbox3' />\n    <label htmlFor='example1-checkbox3'>Check 3</label>\n\n    <input type='submit' value='Check the console for onSubmit' />\n  </ValidatedForm>\n          `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleBasic />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Custom Validation Functions</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-function.jsx'>Source</a>\n            <p>Just pass a function to validatesWith to use your own validation functions.</p>\n            <pre>\n              {`\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example2-fzappa'>Must be Frank Zappa:</label>\n      <FormGuard watches='fzappa' validatesWith={ val => val === 'Frank Zappa' } >\n          Value must be \"Frank Zappa\"\n      </FormGuard> \n      <input type='text' name='fzappa' id='example2-fzappa' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleFunction />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Guarding Multiple Form Elements with one FormGuard</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-multiple-watches.jsx'>Source</a>\n            <p>A FormGuard can watch multiple elements by passing an array to the <i>watches</i> prop</p>\n            <p>In this example the <i>validateTwoInputs</i> function requires that either <i>input1</i> OR <i>input2</i> is filled in.</p>\n            <pre>\n              {`\n    function validateTwoInputs (input1, input2) {\n      return (input1 && input1.length > 0) || \n             (input2 && input2.length > 0);\n    }\n\n    [...]\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example3-input1'>Input 1:</label>\n      <input type='text' name='input1' id='example3-input1' />  \n\n      <FormGuard \n          watches={['input1', 'input2']} \n          validatesWith={validateTwoInputs} >\n          \n          Either input 1 OR input 2 is required.\n      </FormGuard> \n\n      <label htmlFor='example3-input2'>Input 2:</label>\n      <input type='text' name='input2' id='example3-input2' />  \n\n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleMultipleWatches />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Styling / CSS</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-style.jsx'>Source</a>\n            <p>react-formguards will add the css class 'input-invalid' to form controls that are invalid.</p>\n            <p>The span that displays a FormGuard error text will have the css class 'validation-error'</p>\n            <pre>\n              {`\n    \n    .input-invalid {\n      outline: 3px solid #0000ff;\n    }\n\n    span.validation-error {\n      float: right;\n      font-weight: bold;\n      color: #00ff00;\n    }\n\n    <ValidatedForm onSubmit={(e, formVals) => console.log(formVals)}>\n\n      <label htmlFor='example4-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example4-email' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleStyle />\n          </div>\n        </div>\n\n        <div className='example'>\n          <div className='example-code'>\n            <h2>Passing Preset Values</h2>\n            <a href='https://github.com/NuclearHorseStudios/react-formguards/blob/master/example/src/examples/example-values.jsx'>Source</a>\n            <p>Just pass an object as the formVals prop to preset values in the form.</p>\n            <pre>\n              {`\n    const formVals = {\n      name: 'Emmett Brown',\n      email: 'doc@example.org',\n      phone: '555 555 5555',\n      comments: 'Great Scott!!'\n    };\n\n    [...]\n\n    <ValidatedForm formVals={formVals} onSubmit={(e, formVals) => console.log(formVals)}>\n      <label htmlFor='example1-name'>Name:</label>\n      <input type='text' name='name' id='example1-name' />\n\n      <label htmlFor='example1-email'>Email:</label>\n      <FormGuard watches='email' validatesWith={validators.required} >\n          Email is required  \n      </FormGuard> \n      <FormGuard watches='email' validatesWith={validators.email} >\n          Please enter a valid email address  \n      </FormGuard> \n      <input type='email' name='email' id='example1-email' />  \n      \n      <label htmlFor='example1-phone'>Telephone:</label>\n      <FormGuard watches='phone' validatesWith={validators.phone} >\n          Please enter a valid phone number  \n      </FormGuard> \n      <input type='tel' name='phone' id='example1-phone' />  \n\n      <label htmlFor='example1-comments'>Comments:</label>\n      <FormGuard watches='comments' validatesWith={validators.maxLength(80)} >\n          Maximum length (80 characters) exceeded\n      </FormGuard> \n      <textarea name='comments' id='example1-comments' />  \n      \n      <input type='submit' value='Check the console for onSubmit' />\n    </ValidatedForm>\n            `}\n            </pre>\n          </div>\n          <div className='example-implementation'>\n            <ExampleValues />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}